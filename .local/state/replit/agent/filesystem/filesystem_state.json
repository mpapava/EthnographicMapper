{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Georgian Heritage Website - Architecture Overview\n\n## Overview\n\nThe Georgian Heritage Website is a full-stack web application built to showcase Georgia's ethnographic regions through an immersive digital experience. The platform combines cultural exploration, e-commerce functionality, and content management to promote Georgian heritage through tours, products, and educational content.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript, using Vite for build tooling\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Georgian-themed color palette\n- **Internationalization**: Custom i18n implementation supporting English, Georgian (ka), and Russian (ru)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API Design**: RESTful API with structured error handling\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Build and Development\n- **Development**: Vite dev server with HMR and Replit integration\n- **Production Build**: ESBuild for server bundling, Vite for client bundling\n- **TypeScript**: Strict mode enabled across the entire codebase\n\n## Key Components\n\n### Database Schema\nThe application uses a comprehensive database schema with the following main entities:\n- **Users**: Authentication and role management (user/admin)\n- **Regions**: Ethnographic regions with multilingual content\n- **Tours**: Tour packages with pricing, duration, and regional associations\n- **Products**: E-commerce items (food, wine, souvenirs) with categories\n- **Blog Posts**: Content management with publishing workflow\n- **Bookings**: Tour reservation system\n- **Shopping Cart**: Session-based cart management\n- **Contact Forms**: Customer inquiry handling\n\n### Frontend Components\n- **Layout Components**: Header with navigation and language switching, Footer\n- **Content Cards**: RegionCard, TourCard, ProductCard, BlogCard for consistent presentation\n- **Forms**: ContactForm with validation, booking forms\n- **UI Components**: Complete Shadcn/ui component library\n\n### API Endpoints\n- `/api/regions` - Region data and details\n- `/api/tours` - Tour listings with filtering capabilities\n- `/api/products` - Product catalog with categories\n- `/api/blog` - Blog post management\n- `/api/contact` - Contact form handling\n- `/api/bookings` - Tour booking system\n- `/api/cart` - Shopping cart operations\n\n## Data Flow\n\n1. **Client Requests**: React components use TanStack Query for data fetching\n2. **API Layer**: Express.js routes handle business logic and validation\n3. **Data Layer**: Drizzle ORM provides type-safe database operations\n4. **Response Flow**: JSON responses with structured error handling\n5. **State Management**: React Query manages caching and synchronization\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL connection\n- **drizzle-orm**: Type-safe database operations\n- **@tanstack/react-query**: Server state management\n- **wouter**: Lightweight React routing\n- **react-helmet-async**: SEO and meta tag management\n\n### UI and Styling\n- **@radix-ui/***: Accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Development Tools\n- **vite**: Fast build tool and dev server\n- **typescript**: Type safety\n- **drizzle-kit**: Database migrations and management\n\n## Deployment Strategy\n\n### Development Environment\n- Replit integration with live reload\n- Vite dev server with Express middleware\n- Hot module replacement for rapid development\n\n### Production Build Process\n1. Client build: Vite bundles React application\n2. Server build: ESBuild bundles Express server\n3. Database migrations: Drizzle Kit handles schema updates\n4. Static assets: Served from dist/public directory\n\n### Environment Configuration\n- Database URL configuration via environment variables\n- Development/production mode switching\n- Replit-specific plugins and optimizations\n\n## Changelog\n\n- September 27, 2025. Completed comprehensive username/password authentication system implementation: created full-stack authentication with user registration, login, logout functionality; implemented admin control panel with user management capabilities; added role-based access control (user/admin roles); integrated bcrypt password hashing and PostgreSQL session storage; updated header navigation with authentication state management; fixed critical DatabaseStorage class missing methods; all functionality tested end-to-end and working perfectly\n- June 29, 2025. Added login and registration pages with full authentication integration, updated header navigation to include login/register buttons for unauthenticated users and user dropdown for authenticated users, includes mobile menu support\n- June 29, 2025. Fixed all broken image URLs (Samegrelo, Javakheti regions, Samegrelo Cultural Experience tour, Imereti Cave Exploration tour, Georgian Chacha product), removed scroll caption texts from all sliders, added 5 new Georgian cultural blog stories covering Queen Tamar, polyphonic singing, cloisonn√© metalwork, sacred mountains, and Georgian script\n- June 29, 2025. Fixed broken image URLs for Svaneti and Samegrelo regions, added 4 additional tours and 5 additional products to enhance slider content, implemented visible scrollbars with custom styling for all horizontal sliders (regions, tours, products), added scroll indicators to improve user experience\n- June 29, 2025. Added PostgreSQL database with Drizzle ORM, migrated from in-memory storage to persistent database storage, seeded with Georgian heritage data\n- June 28, 2025. Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":6081},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertBookingSchema, insertCartItemSchema } from \"@shared/schema\";\nimport { setupAuth, requireAuth, requireAdmin } from \"./auth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication - handles /api/register, /api/login, /api/logout, /api/user, /api/admin/users\n  setupAuth(app);\n  // Regions\n  app.get(\"/api/regions\", async (req, res) => {\n    try {\n      const regions = await storage.getAllRegions();\n      res.json(regions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch regions\" });\n    }\n  });\n\n  app.get(\"/api/regions/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const region = await storage.getRegionById(id);\n      if (!region) {\n        return res.status(404).json({ error: \"Region not found\" });\n      }\n      res.json(region);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch region\" });\n    }\n  });\n\n  app.get(\"/api/regions/slug/:slug\", async (req, res) => {\n    try {\n      const region = await storage.getRegionBySlug(req.params.slug);\n      if (!region) {\n        return res.status(404).json({ error: \"Region not found\" });\n      }\n      res.json(region);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch region\" });\n    }\n  });\n\n  // Admin-only region update\n  app.put(\"/api/admin/regions/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const updatedRegion = await storage.updateRegion(id, updateData);\n      if (!updatedRegion) {\n        return res.status(404).json({ error: \"Region not found\" });\n      }\n      \n      res.json(updatedRegion);\n    } catch (error) {\n      console.error(\"Error updating region:\", error);\n      res.status(500).json({ error: \"Failed to update region\" });\n    }\n  });\n\n  // Tours\n  app.get(\"/api/tours\", async (req, res) => {\n    try {\n      const { category, region, featured } = req.query;\n      let tours = await storage.getAllTours();\n\n      if (category) {\n        tours = tours.filter(tour => tour.category === category);\n      }\n      if (region) {\n        tours = tours.filter(tour => tour.regionId === parseInt(region as string));\n      }\n      if (featured === 'true') {\n        tours = tours.filter(tour => tour.featured);\n      }\n\n      res.json(tours);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tours\" });\n    }\n  });\n\n  app.get(\"/api/tours/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const tour = await storage.getTourById(id);\n      if (!tour) {\n        return res.status(404).json({ error: \"Tour not found\" });\n      }\n      res.json(tour);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tour\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      let products = await storage.getAllProducts();\n\n      if (category) {\n        products = products.filter(product => product.category === category);\n      }\n      if (featured === 'true') {\n        products = products.filter(product => product.featured);\n      }\n\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const product = await storage.getProductById(id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Blog posts\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      let posts = await storage.getPublishedBlogPosts();\n\n      if (category) {\n        posts = posts.filter(post => post.category === category);\n      }\n\n      // Sort by published date, newest first\n      posts.sort((a, b) => {\n        const dateA = a.publishedAt ? new Date(a.publishedAt).getTime() : 0;\n        const dateB = b.publishedAt ? new Date(b.publishedAt).getTime() : 0;\n        return dateB - dateA;\n      });\n\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPostBySlug(req.params.slug);\n      if (!post || !post.published) {\n        return res.status(404).json({ error: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(validatedData);\n      res.status(201).json({ message: \"Contact form submitted successfully\", id: contact.id });\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: \"Failed to submit contact form\" });\n      }\n    }\n  });\n\n  // Bookings\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const validatedData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking(validatedData);\n      res.status(201).json({ message: \"Booking created successfully\", id: booking.id });\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: \"Failed to create booking\" });\n      }\n    }\n  });\n\n  // Cart\n  app.get(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      const cartItems = await storage.getCartItems(sessionId);\n      \n      // Get product details for each cart item\n      const cartWithProducts = await Promise.all(cartItems.map(async item => {\n        const product = await storage.getProductById(item.productId);\n        return {\n          ...item,\n          product\n        };\n      }));\n\n      res.json(cartWithProducts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cart items\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      const validatedData = insertCartItemSchema.parse({\n        ...req.body,\n        sessionId\n      });\n      \n      const cartItem = await storage.addToCart(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: \"Failed to add item to cart\" });\n      }\n    }\n  });\n\n  app.put(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { quantity } = req.body;\n      \n      if (!quantity || quantity < 1) {\n        return res.status(400).json({ error: \"Invalid quantity\" });\n      }\n      \n      const cartItem = await storage.updateCartItem(id, quantity);\n      if (!cartItem) {\n        return res.status(404).json({ error: \"Cart item not found\" });\n      }\n      \n      res.json(cartItem);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.removeFromCart(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Cart item not found\" });\n      }\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to remove cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.headers['x-session-id'] as string || 'anonymous';\n      await storage.clearCart(sessionId);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to clear cart\" });\n    }\n  });\n\n  // Admin-only user management\n  app.put(\"/api/admin/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = req.params.id;\n      const updateData = req.body;\n      \n      const updatedUser = await storage.updateUser(id, updateData);\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Admin-only tour management\n  app.put(\"/api/admin/tours/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const updatedTour = await storage.updateTour(id, updateData);\n      if (!updatedTour) {\n        return res.status(404).json({ error: \"Tour not found\" });\n      }\n      \n      res.json(updatedTour);\n    } catch (error) {\n      console.error(\"Error updating tour:\", error);\n      res.status(500).json({ error: \"Failed to update tour\" });\n    }\n  });\n\n  // Admin-only product management\n  app.put(\"/api/admin/products/:id\", requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const updatedProduct = await storage.updateProduct(id, updateData);\n      if (!updatedProduct) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10213},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { regions, tours, products, blogPosts } from \"@shared/schema\";\n\nasync function seedDatabase() {\n  console.log(\"üå± Seeding database...\");\n\n  try {\n    // Clear existing data\n    await db.delete(blogPosts);\n    await db.delete(products);\n    await db.delete(tours);\n    await db.delete(regions);\n\n    // Seed regions\n    const insertedRegions = await db.insert(regions).values([\n      {\n        name: \"Kakheti\",\n        nameKa: \"·Éô·Éê·ÉÆ·Éî·Éó·Éò\",\n        nameRu: \"–ö–∞—Ö–µ—Ç–∏—è\",\n        slug: \"kakheti\",\n        description: \"The wine region of Georgia, home to ancient winemaking traditions and spectacular vineyard landscapes.\",\n        descriptionKa: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É¶·Éï·Éò·Éú·Éò·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò·É°·Éê ·Éì·Éê ·É¶·Éï·Éò·Éú·Éò·É° ·Éï·Éî·Éú·Éê·ÉÆ·Éî·Éë·Éò·É° ·Éõ·É®·Éï·Éî·Éú·Éò·Éî·É†·Éò ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò·É° ·É°·Éê·Éõ·É®·Éù·Éë·Éö·Éù.\",\n        descriptionRu: \"–í–∏–Ω–æ–¥–µ–ª—å—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω –ì—Ä—É–∑–∏–∏, —Ä–æ–¥–∏–Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –≤–∏–Ω–æ–¥–µ–ª–∏—è –∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–µ–π–∑–∞–∂–µ–π.\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96\",\n        mainAttraction: \"Ancient wine cellars and vineyards\",\n        featured: true\n      },\n      {\n        name: \"Svaneti\",\n        nameKa: \"·É°·Éï·Éê·Éú·Éî·Éó·Éò\",\n        nameRu: \"–°–≤–∞–Ω–µ—Ç–∏—è\",\n        slug: \"svaneti\",\n        description: \"A highland region known for its medieval towers, unique culture, and breathtaking mountain landscapes.\",\n        descriptionKa: \"·Éõ·Éó·Éò·Éê·Éú·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·É®·É£·Éê ·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·Éô·Éù·É®·Éô·Éî·Éë·Éò·Éó, ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éô·É£·Éö·É¢·É£·É†·Éò·Éó·Éê ·Éì·Éê ·Éó·Éï·Éê·Éö·É¨·Éê·É†·Éõ·É¢·Éê·É™·Éò ·Éõ·Éó·Éò·É° ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò·Éó.\",\n        descriptionRu: \"–ì–æ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–º–∏ –±–∞—à–Ω—è–º–∏, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º–∏ –≥–æ—Ä–Ω—ã–º–∏ –ø–µ–π–∑–∞–∂–∞–º–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        mainAttraction: \"Medieval Svan towers\",\n        featured: true\n      },\n      {\n        name: \"Samegrelo\",\n        nameKa: \"·É°·Éê·Éõ·Éî·Éí·É†·Éî·Éö·Éù\",\n        nameRu: \"–°–∞–º–µ–≥—Ä–µ–ª–æ\",\n        slug: \"samegrelo\",\n        description: \"A region rich in Mingrelian culture, known for its distinctive cuisine and warm hospitality.\",\n        descriptionKa: \"·É†·Éî·Éí·Éò·Éù·Éú·Éò ·Éõ·Éì·Éò·Éì·Éê·É†·Éò ·Éõ·Éî·Éí·É†·É£·Éö·Éò ·Éô·É£·Éö·É¢·É£·É†·Éò·Éó, ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·Éí·Éê·Éõ·Éù·É†·É©·Éî·É£·Éö·Éò ·É°·Éê·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù·Éó·Éò ·Éì·Éê ·Éó·Éë·Éò·Éö·Éò ·É°·É¢·É£·Éõ·Éê·É†·Éõ·Éê·É°·Éû·Éò·Éú·É´·Éö·Éù·Éë·Éò·Éó.\",\n        descriptionRu: \"–†–µ–≥–∏–æ–Ω, –±–æ–≥–∞—Ç—ã–π –º–µ–≥—Ä–µ–ª—å—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω–æ–π –∫—É—Ö–Ω–µ–π –∏ —Ç–µ–ø–ª—ã–º –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ–º.\",\n        imageUrl: \"https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        mainAttraction: \"Mingrelian cultural sites\",\n        featured: false\n      },\n      {\n        name: \"Imereti\",\n        nameKa: \"·Éò·Éõ·Éî·É†·Éî·Éó·Éò\",\n        nameRu: \"–ò–º–µ—Ä–µ—Ç–∏\",\n        slug: \"imereti\",\n        description: \"The central region of Georgia, featuring diverse landscapes from caves to vineyards.\",\n        descriptionKa: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É™·Éî·Éú·É¢·É†·Éê·Éö·É£·É†·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·ÉÆ·Éê·É°·Éò·Éê·Éó·Éì·Éî·Éë·Éê ·Éõ·É†·Éê·Éï·Éê·Éö·É§·Éî·É†·Éù·Éï·Éê·Éú·Éò ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò·Éó ·Éõ·É¶·Éï·Éò·Éõ·Éî·Éî·Éë·Éò·Éì·Éê·Éú ·Éï·Éî·Éú·Éê·ÉÆ·Éî·Éë·Éê·Éõ·Éì·Éî.\",\n        descriptionRu: \"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –ì—Ä—É–∑–∏–∏ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º–∏ –æ—Ç –ø–µ—â–µ—Ä –¥–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫–æ–≤.\",\n        imageUrl: \"https://images.unsplash.com/photo-1536431311719-398b6704d4cc\",\n        mainAttraction: \"Prometheus Cave and vineyards\",\n        featured: false\n      },\n      {\n        name: \"Racha\",\n        nameKa: \"·É†·Éê·É≠·Éê\",\n        nameRu: \"–†–∞—á–∞\",\n        slug: \"racha\",\n        description: \"A mountainous region famous for its mineral waters and traditional mountain culture.\",\n        descriptionKa: \"·Éõ·Éó·Éò·Éê·Éú·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·Éõ·Éò·Éú·Éî·É†·Éê·Éö·É£·É†·Éò ·É¨·Éß·Éö·Éî·Éë·Éò·Éó·Éê ·Éì·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·Éõ·Éó·Éò·É° ·Éô·É£·Éö·É¢·É£·É†·Éò·Éó.\",\n        descriptionRu: \"–ì–æ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–º–∏ –≤–æ–¥–∞–º–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –≥–æ—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4\",\n        mainAttraction: \"Mineral springs and mountain villages\",\n        featured: false\n      },\n      {\n        name: \"Javakheti\",\n        nameKa: \"·ÉØ·Éê·Éï·Éê·ÉÆ·Éî·Éó·Éò\",\n        nameRu: \"–î–∂–∞–≤–∞—Ö–µ—Ç–∏\",\n        slug: \"javakheti\",\n        description: \"A high plateau region with unique volcanic landscapes and ancient cultural heritage.\",\n        descriptionKa: \"·Éõ·Éê·É¶·Éê·Éö·Éõ·Éó·Éò·Éê·Éú·Éò ·Éû·Éö·Éê·É¢·Éù ·É†·Éî·Éí·Éò·Éù·Éú·Éò ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éï·É£·Éö·Éô·Éê·Éú·É£·É†·Éò ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò·Éó·Éê ·Éì·Éê ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·Éó.\",\n        descriptionRu: \"–í—ã—Å–æ–∫–æ–≥–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–æ-—Ä–µ–≥–∏–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º–∏ –∏ –¥—Ä–µ–≤–Ω–∏–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º.\",\n        imageUrl: \"https://images.unsplash.com/photo-1464822759844-d150ad6d1493?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        mainAttraction: \"Volcanic plateaus and ancient sites\",\n        featured: false\n      }\n    ]).returning();\n\n    console.log(\"‚úÖ Regions seeded\");\n\n    // Seed tours\n    await db.insert(tours).values([\n      {\n        title: \"Kakheti Wine Heritage Tour\",\n        titleKa: \"·Éô·Éê·ÉÆ·Éî·Éó·Éò·É° ·É¶·Éï·Éò·Éú·Éò·É° ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·É° ·É¢·É£·É†·Éò\",\n        titleRu: \"–¢—É—Ä –≤–∏–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –ö–∞—Ö–µ—Ç–∏–∏\",\n        description: \"Explore the ancient winemaking traditions of Georgia's premier wine region.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éõ·Éó·Éê·Éï·Éê·É†·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éò·É° ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò.\",\n        descriptionRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤–∏–Ω–æ–¥–µ–ª–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –≤–∏–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ì—Ä—É–∑–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96\",\n        featured: true,\n        category: \"Cultural\",\n        price: \"150\",\n        duration: \"Full Day\",\n        maxPeople: 12,\n        includes: \"Transportation, wine tasting, traditional lunch, guide\",\n        regionId: insertedRegions[0].id\n      },\n      {\n        title: \"Svaneti Mountain Adventure\",\n        titleKa: \"·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·Éõ·Éó·Éò·É° ·Éó·Éê·Éï·Éí·Éê·Éì·Éê·É°·Éê·Éï·Éê·Éö·Éò\",\n        titleRu: \"–ì–æ—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –°–≤–∞–Ω–µ—Ç–∏–∏\",\n        description: \"Discover the medieval towers and mountain culture of Upper Svaneti.\",\n        descriptionKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·Éñ·Éî·Éõ·Éù ·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·É®·É£·Éê ·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·Éô·Éù·É®·Éô·Éî·Éë·Éò ·Éì·Éê ·Éõ·Éó·Éò·É° ·Éô·É£·Éö·É¢·É£·É†·Éê.\",\n        descriptionRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–µ –±–∞—à–Ω–∏ –∏ –≥–æ—Ä–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –í–µ—Ä—Ö–Ω–µ–π –°–≤–∞–Ω–µ—Ç–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Adventure\",\n        price: \"200\",\n        duration: \"2 Days\",\n        maxPeople: 8,\n        includes: \"Mountain guide, accommodation, meals, transportation\",\n        regionId: insertedRegions[1].id\n      },\n      {\n        title: \"Samegrelo Cultural Experience\",\n        titleKa: \"·É°·Éê·Éõ·Éî·Éí·É†·Éî·Éö·Éù·É° ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éê\",\n        titleRu: \"–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–ø—ã—Ç –°–∞–º–µ–≥—Ä–µ–ª–æ\",\n        description: \"Immerse yourself in the unique Mingrelian culture and cuisine.\",\n        descriptionKa: \"·É©·Éê·Éî·É§·Éö·Éï·Éî·Éó ·É£·Éú·Éò·Éô·Éê·Éö·É£·É† ·Éõ·Éî·Éí·É†·É£·Éö ·Éô·É£·Éö·É¢·É£·É†·Éê·É°·Éê ·Éì·Éê ·É°·Éê·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù·É®·Éò.\",\n        descriptionRu: \"–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ–≥—Ä–µ–ª—å—Å–∫—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ –∫—É—Ö–Ω—é.\",\n        imageUrl: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Cultural\",\n        price: \"120\",\n        duration: \"Half Day\",\n        maxPeople: 15,\n        includes: \"Cultural guide, traditional meal, local crafts workshop\",\n        regionId: insertedRegions[2].id\n      },\n      {\n        title: \"Tbilisi Historical Walking Tour\",\n        titleKa: \"·Éó·Éë·Éò·Éö·Éò·É°·Éò·É° ·Éò·É°·É¢·Éù·É†·Éò·É£·Éö·Éò ·É§·Éî·ÉÆ·Éò·Éó ·É¢·É£·É†·Éò\",\n        titleRu: \"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π —Ç—É—Ä –ø–æ –¢–±–∏–ª–∏—Å–∏\",\n        description: \"Explore the old town and discover centuries of Georgian history.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É´·Éï·Éî·Éö·Éò ·É•·Éê·Éö·Éê·É•·Éò ·Éì·Éê ·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·Éò·É°·É¢·Éù·É†·Éò·Éê.\",\n        descriptionRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –≤–µ–∫–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Cultural\",\n        price: \"80\",\n        duration: \"Half Day\",\n        maxPeople: 20,\n        includes: \"Professional guide, entrance fees, traditional snacks\",\n        regionId: insertedRegions[0].id\n      },\n      {\n        title: \"Samtskhe-Javakheti Adventure\",\n        titleKa: \"·É°·Éê·Éõ·É™·ÉÆ·Éî-·ÉØ·Éê·Éï·Éê·ÉÆ·Éî·Éó·Éò·É° ·Éó·Éê·Éï·Éí·Éê·Éì·Éê·É°·Éê·Éï·Éê·Éö·Éò\",\n        titleRu: \"–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –°–∞–º—Ü—Ö–µ-–î–∂–∞–≤–∞—Ö–µ—Ç–∏\",\n        description: \"Discover ancient fortresses and volcanic landscapes.\",\n        descriptionKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É™·Éò·ÉÆ·Éî-·É°·Éò·Éõ·Éê·Éí·É†·Éî·Éî·Éë·Éò ·Éì·Éê ·Éï·É£·Éö·Éô·Éê·Éú·É£·É†·Éò ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò.\",\n        descriptionRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ –∫—Ä–µ–ø–æ—Å—Ç–∏ –∏ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–µ–π–∑–∞–∂–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Adventure\",\n        price: \"180\",\n        duration: \"Full Day\",\n        maxPeople: 10,\n        includes: \"Transportation, guide, lunch, fortress entrance\",\n        regionId: insertedRegions[3].id\n      },\n      {\n        title: \"Adjara Coastal Discovery\",\n        titleKa: \"·Éê·É≠·Éê·É†·Éò·É° ·É°·Éê·Éú·Éê·Éû·Éò·É†·Éù ·Éê·É¶·Éõ·Éù·É©·Éî·Éú·Éê\",\n        titleRu: \"–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–±–µ—Ä–µ–∂—å—è –ê–¥–∂–∞—Ä–∏–∏\",\n        description: \"Experience the unique blend of Georgian and Turkish cultures by the Black Sea.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éù·Éò·É™·Éê·Éì·Éî·Éó ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éì·Éê ·Éó·É£·É†·É•·É£·Éö·Éò ·Éô·É£·Éö·É¢·É£·É†·Éî·Éë·Éò·É° ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éú·Éê·Éñ·Éê·Éï·Éò ·É®·Éê·Éï·Éò ·Éñ·É¶·Éï·Éò·É° ·É°·Éê·Éú·Éê·Éû·Éò·É†·Éù·Éñ·Éî.\",\n        descriptionRu: \"–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –∏ —Ç—É—Ä–µ—Ü–∫–æ–π –∫—É–ª—å—Ç—É—Ä —É –ß–µ—Ä–Ω–æ–≥–æ –º–æ—Ä—è.\",\n        imageUrl: \"https://images.unsplash.com/photo-1536431311719-398b6704d4cc?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Cultural\",\n        price: \"140\",\n        duration: \"Full Day\",\n        maxPeople: 15,\n        includes: \"Beach access, cultural sites, traditional Adjarian khachapuri\",\n        regionId: insertedRegions[4].id\n      },\n      {\n        title: \"Imereti Cave Exploration\",\n        titleKa: \"·Éò·Éõ·Éî·É†·Éî·Éó·Éò·É° ·Éõ·É¶·Éï·Éò·Éõ·Éî·Éî·Éë·Éò·É° ·Éê·É¶·Éõ·Éù·É©·Éî·Éú·Éê\",\n        titleRu: \"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—â–µ—Ä –ò–º–µ—Ä–µ—Ç–∏\",\n        description: \"Journey through Georgia's most spectacular underground caves.\",\n        descriptionKa: \"·Éõ·Éù·Éí·Éñ·Éê·É£·É†·Éù·Éë·Éê ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·Éî·É§·Éî·É•·É¢·É£·É† ·Éõ·Éò·É¨·Éò·É°·É•·Éï·Éî·É®·Éê ·Éõ·É¶·Éï·Éò·Éõ·Éî·Éî·Éë·É®·Éò.\",\n        descriptionRu: \"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Å–∞–º—ã–º –∑—Ä–µ–ª–∏—â–Ω—ã–º –ø–æ–¥–∑–µ–º–Ω—ã–º –ø–µ—â–µ—Ä–∞–º –ì—Ä—É–∑–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1551972251-12070d63502a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Adventure\",\n        price: \"100\",\n        duration: \"Half Day\",\n        maxPeople: 12,\n        includes: \"Cave entrance, safety equipment, guide\",\n        regionId: insertedRegions[5].id\n      }\n    ]);\n\n    console.log(\"‚úÖ Tours seeded\");\n\n    // Seed products\n    await db.insert(products).values([\n      {\n        name: \"Kakheti Saperavi 2020\",\n        nameKa: \"·Éô·Éê·ÉÆ·É£·É†·Éò ·É°·Éê·É§·Éî·É†·Éê·Éï·Éò 2020\",\n        nameRu: \"–ö–∞—Ö–µ—Ç–∏–Ω—Å–∫–∏–π –°–∞–ø–µ—Ä–∞–≤–∏ 2020\",\n        description: \"Premium Georgian red wine from ancient Qvevri method.\",\n        descriptionKa: \"·Éû·É†·Éî·Éõ·Éò·É£·Éõ ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¨·Éò·Éó·Éî·Éö·Éò ·É¶·Éï·Éò·Éú·Éù ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É•·Éï·Éî·Éï·É†·Éò·É° ·Éõ·Éî·Éó·Éù·Éì·Éò·Éó.\",\n        descriptionRu: \"–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ –¥—Ä–µ–≤–Ω–∏–º –º–µ—Ç–æ–¥–æ–º –∫–≤–µ–≤—Ä–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506377247377-2a5b3b417ebb\",\n        featured: true,\n        category: \"Wine\",\n        price: \"45.00\",\n        inStock: true\n      },\n      {\n        name: \"Svan Salt\",\n        nameKa: \"·É°·Éï·Éê·Éú·É£·É†·Éò ·Éõ·Éê·É†·Éò·Éö·Éò\",\n        nameRu: \"–°–≤–∞–Ω—Å–∫–∞—è —Å–æ–ª—å\",\n        description: \"Traditional seasoning blend from Svaneti highlands.\",\n        descriptionKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É°·Éê·Éú·Éî·Éö·Éî·Éë·Éö·Éî·Éë·Éò·É° ·Éú·Éê·Éñ·Éê·Éï·Éò ·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·Éõ·Éó·Éî·Éë·Éò·Éì·Éê·Éú.\",\n        descriptionRu: \"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–º–µ—Å—å –ø—Ä–∏–ø—Ä–∞–≤ –∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ—Ä–Ω–æ–π –°–≤–∞–Ω–µ—Ç–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d\",\n        featured: false,\n        category: \"Food\",\n        price: \"12.00\",\n        inStock: true\n      },\n      {\n        name: \"Georgian Chacha\",\n        nameKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·É≠·Éê·É≠·Éê\",\n        nameRu: \"–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è —á–∞—á–∞\",\n        description: \"Traditional Georgian grape brandy, 40% alcohol.\",\n        descriptionKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éß·É£·É†·É´·Éú·Éò·É° ·Éë·É†·Éî·Éú·Éì·Éò, 40% ·Éê·Éö·Éô·Éù·É∞·Éù·Éö·Éò.\",\n        descriptionRu: \"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–π –±—Ä–µ–Ω–¥–∏, 40% –∞–ª–∫–æ–≥–æ–ª—è.\",\n        imageUrl: \"https://images.unsplash.com/photo-1569529465841-dfecdab7503b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Spirits\",\n        price: \"35.00\",\n        inStock: true\n      },\n      {\n        name: \"Adjarian Honey\",\n        nameKa: \"·Éê·É≠·Éê·É†·É£·Éö·Éò ·Éó·Éê·É§·Éö·Éò\",\n        nameRu: \"–ê–¥–∂–∞—Ä—Å–∫–∏–π –º–µ–¥\",\n        description: \"Pure mountain honey from Adjara's pristine forests.\",\n        descriptionKa: \"·É°·É£·É§·Éó·Éê ·Éõ·Éó·Éò·É° ·Éó·Éê·É§·Éö·Éò ·Éê·É≠·Éê·É†·Éò·É° ·É£·Éë·Éò·É¨·Éù ·É¢·Éß·Éî·Éî·Éë·Éò·Éì·Éê·Éú.\",\n        descriptionRu: \"–ß–∏—Å—Ç—ã–π –≥–æ—Ä–Ω—ã–π –º–µ–¥ –∏–∑ –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ª–µ—Å–æ–≤ –ê–¥–∂–∞—Ä–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1587049352851-8d4e89133924?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Food\",\n        price: \"18.00\",\n        inStock: true\n      },\n      {\n        name: \"Georgian Khinkali Spice Mix\",\n        nameKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·ÉÆ·Éò·Éú·Éô·Éö·Éò·É° ·É°·Éê·Éú·Éî·Éö·Éî·Éë·Éö·Éî·Éë·Éò\",\n        nameRu: \"–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π –¥–ª—è —Ö–∏–Ω–∫–∞–ª–∏\",\n        description: \"Authentic spice blend for traditional Georgian dumplings.\",\n        descriptionKa: \"·Éê·Éï·Éó·Éî·Éú·É¢·É£·É†·Éò ·É°·Éê·Éú·Éî·Éö·Éî·Éë·Éö·Éî·Éë·Éò·É° ·Éú·Éê·Éñ·Éê·Éï·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·ÉÆ·Éò·Éú·Éô·Éö·Éò·É°·Éó·Éï·Éò·É°.\",\n        descriptionRu: \"–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–∞—è —Å–º–µ—Å—å —Å–ø–µ—Ü–∏–π –¥–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∏–Ω—Å–∫–∏—Ö –ø–µ–ª—å–º–µ–Ω–µ–π.\",\n        imageUrl: \"https://images.unsplash.com/photo-1596040033229-a9821ebd058d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Food\",\n        price: \"8.00\",\n        inStock: true\n      },\n      {\n        name: \"Rkatsiteli White Wine 2021\",\n        nameKa: \"·É†·É•·Éê·É¨·Éò·Éó·Éî·Éö·Éò ·Éó·Éî·Éó·É†·Éò ·É¶·Éï·Éò·Éú·Éù 2021\",\n        nameRu: \"–†–∫–∞—Ü–∏—Ç–µ–ª–∏ –±–µ–ª–æ–µ –≤–∏–Ω–æ 2021\",\n        description: \"Crisp white wine from Georgia's indigenous grape variety.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éë·É†·É£·Éú·Éî·Éë·É£·Éö·Éò ·Éó·Éî·Éó·É†·Éò ·É¶·Éï·Éò·Éú·Éù ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éê·Éì·Éí·Éò·Éö·Éù·Éë·É†·Éò·Éï·Éò ·Éß·É£·É†·É´·Éú·Éò·É° ·ÉØ·Éò·É®·Éò·Éì·Éê·Éú.\",\n        descriptionRu: \"–°–≤–µ–∂–µ–µ –±–µ–ª–æ–µ –≤–∏–Ω–æ –∏–∑ –º–µ—Å—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ —Å–æ—Ä—Ç–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506377247377-2a5b3b417ebb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Wine\",\n        price: \"38.00\",\n        inStock: true\n      },\n      {\n        name: \"Georgian Churchkhela\",\n        nameKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·É©·É£·É†·É©·ÉÆ·Éî·Éö·Éê\",\n        nameRu: \"–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è —á—É—Ä—á—Ö–µ–ª–∞\",\n        description: \"Traditional Georgian candle-shaped candy made with grape juice and nuts.\",\n        descriptionKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·É°·Éê·Éú·Éó·Éö·Éò·É° ·É§·Éù·É†·Éõ·Éò·É° ·É¢·Éô·Éë·Éò·Éö·Éî·É£·Éö·Éò ·Éß·É£·É†·É´·Éú·Éò·É° ·É¨·Éï·Éî·Éú·Éò·Éó·Éê ·Éì·Éê ·Éô·Éê·Éô·Éö·Éò·Éó.\",\n        descriptionRu: \"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è —Å–≤–µ—á–∞-–∫–æ–Ω—Ñ–µ—Ç–∞ –∏–∑ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–æ–≥–æ —Å–æ–∫–∞ –∏ –æ—Ä–µ—Ö–æ–≤.\",\n        imageUrl: \"https://images.unsplash.com/photo-1587049352851-8d4e89133924?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: false,\n        category: \"Food\",\n        price: \"15.00\",\n        inStock: true\n      },\n      {\n        name: \"Traditional Georgian Clay Wine Jug\",\n        nameKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éó·Éò·ÉÆ·Éò·É° ·É¶·Éï·Éò·Éú·Éò·É° ·É•·Éù·Éó·Éê·Éú·Éò\",\n        nameRu: \"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π –≥–ª–∏–Ω—è–Ω—ã–π –≤–∏–Ω–Ω—ã–π –∫—É–≤—à–∏–Ω\",\n        description: \"Handcrafted clay vessel for storing and serving Georgian wine.\",\n        descriptionKa: \"·ÉÆ·Éî·Éö·Éú·Éê·Éô·Éî·Éó·Éò ·Éó·Éò·ÉÆ·Éò·É° ·É≠·É£·É†·É≠·Éî·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·É®·Éî·É°·Éê·Éú·Éê·ÉÆ·Éê·Éì ·Éì·Éê ·Éõ·Éò·É¨·Éù·Éì·Éî·Éë·Éò·É°·Éó·Éï·Éò·É°.\",\n        descriptionRu: \"–†—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≥–ª–∏–Ω—è–Ω—ã–π —Å–æ—Å—É–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–¥–∞—á–∏ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ –≤–∏–Ω–∞.\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        featured: true,\n        category: \"Souvenirs\",\n        price: \"65.00\",\n        inStock: true\n      }\n    ]);\n\n    console.log(\"‚úÖ Products seeded\");\n\n    // Seed blog posts\n    await db.insert(blogPosts).values([\n      {\n        title: \"The Sacred Art of Georgian Supra\",\n        titleKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·É°·É£·É§·É†·Éò·É° ·É¨·Éõ·Éò·Éú·Éì·Éê ·ÉÆ·Éî·Éö·Éù·Éï·Éú·Éî·Éë·Éê\",\n        titleRu: \"–°–≤—è—â–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ —Å—É–ø—Ä–∞\",\n        slug: \"sacred-art-georgian-supra\",\n        content: \"The Georgian supra is more than just a feast‚Äîit's a sacred ritual that connects generations, honors guests, and celebrates life itself...\",\n        excerpt: \"Discover the deep cultural significance behind Georgia's traditional feast and its role in preserving national identity.\",\n        excerptKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É¶·É†·Éõ·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éê ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·Éñ·Éê·É§·ÉÆ·É£·Éö·Éò·É° ·Éõ·Éò·É¶·Éõ·Éê ·Éì·Éê ·Éõ·Éò·É°·Éò ·É†·Éù·Éö·Éò ·Éî·É†·Éù·Éï·Éú·É£·Éö·Éò ·Éò·Éì·Éî·Éú·É¢·Éù·Éë·Éò·É° ·É®·Éî·Éú·Éê·É†·É©·É£·Éú·Éî·Éë·Éê·É®·Éò.\",\n        excerptRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞ –∏ –µ–≥–æ —Ä–æ–ª—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1574484284002-952d92456975\",\n        category: \"Culture\",\n        published: true,\n        publishedAt: new Date(\"2024-01-15\"),\n        createdAt: new Date(\"2024-01-15\")\n      },\n      {\n        title: \"Winemaking Traditions in Modern Georgia\",\n        titleKa: \"·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò ·Éó·Éê·Éú·Éê·Éõ·Éî·Éì·É†·Éù·Éï·Éî ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É®·Éò\",\n        titleRu: \"–¢—Ä–∞–¥–∏—Ü–∏–∏ –≤–∏–Ω–æ–¥–µ–ª–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ì—Ä—É–∑–∏–∏\",\n        slug: \"winemaking-traditions-modern-georgia\",\n        content: \"Georgia's 8,000-year winemaking tradition continues to thrive in the modern era, blending ancient techniques with contemporary innovation...\",\n        excerpt: \"How Georgia's ancient qvevri winemaking method is experiencing a renaissance in the 21st century.\",\n        excerptKa: \"·É†·Éù·Éí·Éù·É† ·Éí·Éê·Éú·Éò·É™·Éì·Éò·É° ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É•·Éï·Éî·Éï·É†·Éò·É° ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·Éõ·Éî·Éó·Éù·Éì·Éò ·É†·Éî·Éú·Éî·É°·Éê·Éú·É°·É° XXI ·É°·Éê·É£·Éô·É£·Éú·Éî·É®·Éò.\",\n        excerptRu: \"–ö–∞–∫ –¥—Ä–µ–≤–Ω–∏–π –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π –º–µ—Ç–æ–¥ –≤–∏–Ω–æ–¥–µ–ª–∏—è –∫–≤–µ–≤—Ä–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å –≤ XXI –≤–µ–∫–µ.\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96\",\n        category: \"Wine\",\n        published: true,\n        publishedAt: new Date(\"2024-01-10\"),\n        createdAt: new Date(\"2024-01-10\")\n      },\n      {\n        title: \"The Legend of Queen Tamar and Georgian Unity\",\n        titleKa: \"·Éõ·Éî·É§·Éî ·Éó·Éê·Éõ·Éê·É†·Éò·É° ·Éö·Éî·Éí·Éî·Éú·Éì·Éê ·Éì·Éê ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éî·É†·Éó·Éù·Éë·Éê\",\n        titleRu: \"–õ–µ–≥–µ–Ω–¥–∞ –æ —Ü–∞—Ä–∏—Ü–µ –¢–∞–º–∞—Ä –∏ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ\",\n        slug: \"legend-queen-tamar-georgian-unity\",\n        content: \"Queen Tamar of Georgia (1184-1213) stands as one of the most revered figures in Georgian history, representing the golden age of Georgian culture and territorial expansion. Her reign marked a period of unprecedented prosperity, cultural flourishing, and military success that continues to inspire Georgians today...\",\n        excerpt: \"Explore the legendary reign of Queen Tamar and how her leadership shaped Georgian identity and cultural traditions.\",\n        excerptKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·Éõ·Éî·É§·Éî ·Éó·Éê·Éõ·Éê·É†·Éò·É° ·Éö·Éî·Éí·Éî·Éú·Éì·Éê·É†·É£·Éö·Éò ·Éõ·Éî·É§·Éù·Éë·Éê ·Éì·Éê ·É†·Éù·Éí·Éù·É† ·É©·Éê·Éõ·Éù·Éê·Éß·Éê·Éö·Éò·Éë·Éê ·Éõ·Éò·É°·Éõ·Éê ·Éö·Éò·Éì·Éî·É†·Éù·Éë·Éê·Éõ ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éò·Éì·Éî·Éú·É¢·Éù·Éë·Éê ·Éì·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò.\",\n        excerptRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∞—Ä–∏—Ü—ã –¢–∞–º–∞—Ä –∏ —Ç–æ, –∫–∞–∫ –µ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ –≥—Ä—É–∑–∏–Ω—Å–∫—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1594736797933-d0201ba2fe65?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        category: \"History\",\n        published: true,\n        publishedAt: new Date(\"2024-01-05\"),\n        createdAt: new Date(\"2024-01-05\")\n      },\n      {\n        title: \"Polyphonic Singing: Georgia's Musical Soul\",\n        titleKa: \"·Éû·Éù·Éö·Éò·É§·Éù·Éú·Éò·É£·É†·Éò ·É°·Éò·Éõ·É¶·Éî·É†·Éê: ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éõ·É£·É°·Éò·Éô·Éê·Éö·É£·É†·Éò ·É°·É£·Éö·Éò\",\n        titleRu: \"–ü–æ–ª–∏—Ñ–æ–Ω–∏—á–µ—Å–∫–æ–µ –ø–µ–Ω–∏–µ: –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –¥—É—à–∞ –ì—Ä—É–∑–∏–∏\",\n        slug: \"polyphonic-singing-georgia-musical-soul\",\n        content: \"Georgian polyphonic singing, recognized by UNESCO as a Masterpiece of Oral and Intangible Heritage of Humanity, represents one of the oldest and most complex vocal traditions in the world. This ancient art form, passed down through generations, embodies the very essence of Georgian spirituality and community...\",\n        excerpt: \"Discover the ancient tradition of Georgian polyphonic singing and its profound cultural significance.\",\n        excerptKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éû·Éù·Éö·Éò·É§·Éù·Éú·Éò·É£·É†·Éò ·É°·Éò·Éõ·É¶·Éî·É†·Éò·É° ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éê ·Éì·Éê ·Éõ·Éò·É°·Éò ·É¶·É†·Éõ·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éê.\",\n        excerptRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ –¥—Ä–µ–≤–Ω—é—é —Ç—Ä–∞–¥–∏—Ü–∏—é –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ñ–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–µ–Ω–∏—è –∏ –µ–≥–æ –≥–ª—É–±–æ–∫–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\",\n        imageUrl: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        category: \"Music\",\n        published: true,\n        publishedAt: new Date(\"2023-12-28\"),\n        createdAt: new Date(\"2023-12-28\")\n      },\n      {\n        title: \"The Ancient Art of Cloisonn√©: Georgian Metalwork\",\n        titleKa: \"·Éô·Éö·É£·Éê·Éñ·Éù·Éú·Éî·É° ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·ÉÆ·Éî·Éö·Éù·Éï·Éú·Éî·Éë·Éê: ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éö·Éò·Éó·Éù·Éú·Éò·É° ·Éõ·É£·É®·Éê·Éù·Éë·Éê\",\n        titleRu: \"–î—Ä–µ–≤–Ω–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∫–ª—É–∞–∑–æ–Ω–µ: –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –º–µ—Ç–∞–ª–ª—É\",\n        slug: \"ancient-art-cloisonne-georgian-metalwork\",\n        content: \"Georgian cloisonn√© enamelwork represents one of the finest traditions of medieval decorative arts. From the intricate jewelry of ancient Colchis to the magnificent ecclesiastical objects of the Middle Ages, Georgian artisans have mastered the delicate technique of creating miniature worlds in precious metals...\",\n        excerpt: \"Learn about Georgia's masterful tradition of cloisonn√© metalwork and its artistic heritage.\",\n        excerptKa: \"·Éí·Éê·Éò·Éí·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éù·É°·É¢·Éê·É¢·É£·É†·Éò ·Éô·Éö·É£·Éê·Éñ·Éù·Éú·Éî·É° ·Éö·Éò·Éó·Éù·Éú·Éò·É° ·Éõ·É£·É®·Éê·Éù·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éò·É°·Éê ·Éì·Éê ·Éõ·Éò·É°·Éò ·Éõ·ÉÆ·Éê·É¢·Éï·É†·É£·Éö·Éò ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·É° ·É®·Éî·É°·Éê·ÉÆ·Éî·Éë.\",\n        excerptRu: \"–£–∑–Ω–∞–π—Ç–µ –æ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –º–µ—Ç–∞–ª–ª—É –∫–ª—É–∞–∑–æ–Ω–µ –∏ –µ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∞—Å–ª–µ–¥–∏–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1515377905703-c4788e51af15?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        category: \"Crafts\",\n        published: true,\n        publishedAt: new Date(\"2023-12-20\"),\n        createdAt: new Date(\"2023-12-20\")\n      },\n      {\n        title: \"Sacred Mountains: Spirituality in Georgian Highlands\",\n        titleKa: \"·É¨·Éõ·Éò·Éú·Éì·Éê ·Éõ·Éó·Éî·Éë·Éò: ·É°·É£·Éö·Éò·Éî·É†·Éî·Éë·Éê ·É•·Éê·É†·Éó·É£·Éö ·Éõ·Éê·É¶·Éê·Éö·Éõ·Éó·Éò·Éê·Éú·Éî·Éó·É®·Éò\",\n        titleRu: \"–°–≤—è—â–µ–Ω–Ω—ã–µ –≥–æ—Ä—ã: –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–∑–∏–Ω—Å–∫–∏—Ö –≤—ã—Å–æ–∫–æ–≥–æ—Ä—å—è—Ö\",\n        slug: \"sacred-mountains-spirituality-georgian-highlands\",\n        content: \"In Georgian culture, mountains are not merely geographical features but sacred spaces where earth meets heaven. From the mystical peaks of Svaneti to the spiritual retreats of Samtskhe, Georgia's highland regions have served as centers of religious devotion and cultural preservation for over a millennium...\",\n        excerpt: \"Explore the spiritual significance of Georgia's sacred mountains and their role in cultural preservation.\",\n        excerptKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É¨·Éõ·Éò·Éú·Éì·Éê ·Éõ·Éó·Éî·Éë·Éò·É° ·É°·É£·Éö·Éò·Éî·É†·Éò ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éê ·Éì·Éê ·Éõ·Éê·Éó·Éò ·É†·Éù·Éö·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·É®·Éî·Éú·Éê·É†·É©·É£·Éú·Éî·Éë·Éê·É®·Éò.\",\n        excerptRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—É—Ö–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤—è—â–µ–Ω–Ω—ã—Ö –≥–æ—Ä –ì—Ä—É–∑–∏–∏ –∏ –∏—Ö —Ä–æ–ª—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–ª—å—Ç—É—Ä—ã.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        category: \"Spirituality\",\n        published: true,\n        publishedAt: new Date(\"2023-12-15\"),\n        createdAt: new Date(\"2023-12-15\")\n      },\n      {\n        title: \"The Living Language: Georgian Script and Literature\",\n        titleKa: \"·É™·Éù·É™·ÉÆ·Éê·Éö·Éò ·Éî·Éú·Éê: ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¨·Éî·É†·Éê ·Éì·Éê ·Éö·Éò·É¢·Éî·É†·Éê·É¢·É£·É†·Éê\",\n        titleRu: \"–ñ–∏–≤–æ–π —è–∑—ã–∫: –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\",\n        slug: \"living-language-georgian-script-literature\",\n        content: \"The Georgian alphabet, one of only 14 unique writing systems in the world, represents a 1,500-year journey of linguistic evolution and cultural identity. From ancient manuscripts preserved in monastery libraries to contemporary literature that captures the Georgian soul, the written word has been the vessel of national consciousness...\",\n        excerpt: \"Discover the unique Georgian script and its vital role in preserving literature and cultural identity.\",\n        excerptKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¨·Éî·É†·Éê ·Éì·Éê ·Éõ·Éò·É°·Éò ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éï·Éê·Éú·Éò ·É†·Éù·Éö·Éò ·Éö·Éò·É¢·Éî·É†·Éê·É¢·É£·É†·Éò·É°·Éê ·Éì·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éò·Éì·Éî·Éú·É¢·Éù·Éë·Éò·É° ·É®·Éî·Éú·Éê·É†·É©·É£·Éú·Éî·Éë·Éê·É®·Éò.\",\n        excerptRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≥—Ä—É–∑–∏–Ω—Å–∫—É—é –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –µ–µ –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.\",\n        imageUrl: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\n        category: \"Literature\",\n        published: true,\n        publishedAt: new Date(\"2023-12-10\"),\n        createdAt: new Date(\"2023-12-10\")\n      }\n    ]);\n\n    console.log(\"‚úÖ Blog posts seeded\");\n    console.log(\"üéâ Database seeding completed successfully!\");\n\n  } catch (error) {\n    console.error(\"‚ùå Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}\n\nexport { seedDatabase };","size_bytes":31978},"server/storage.ts":{"content":"import { \n  users, regions, tours, products, blogPosts, contacts, bookings, cartItems,\n  type User, type InsertUser, type UpsertUser, type Region, type InsertRegion, \n  type Tour, type InsertTour, type Product, type InsertProduct,\n  type BlogPost, type InsertBlogPost, type Contact, type InsertContact,\n  type Booking, type InsertBooking, type CartItem, type InsertCartItem\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport createMemoryStore from \"memorystore\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface IStorage {\n  // Users (supports both Replit Auth and username/password auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(userData: { username: string; email: string; password: string; firstName?: string; lastName?: string; role?: string }): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, userData: Partial<InsertUser> & { newPassword?: string }): Promise<User | undefined>;\n  updateUserRole(id: string, role: string): Promise<User | undefined>;\n  updateUserStatus(id: string, isActive: boolean): Promise<User | undefined>;\n  \n  // Session store for authentication\n  sessionStore: session.SessionStore;\n\n  // Regions\n  getAllRegions(): Promise<Region[]>;\n  getRegionById(id: number): Promise<Region | undefined>;\n  getRegionBySlug(slug: string): Promise<Region | undefined>;\n  createRegion(region: InsertRegion): Promise<Region>;\n  updateRegion(id: number, region: Partial<InsertRegion>): Promise<Region | undefined>;\n  deleteRegion(id: number): Promise<boolean>;\n\n  // Tours\n  getAllTours(): Promise<Tour[]>;\n  getTourById(id: number): Promise<Tour | undefined>;\n  getToursByRegion(regionId: number): Promise<Tour[]>;\n  getToursByCategory(category: string): Promise<Tour[]>;\n  getFeaturedTours(): Promise<Tour[]>;\n  createTour(tour: InsertTour): Promise<Tour>;\n  updateTour(id: number, tour: Partial<InsertTour>): Promise<Tour | undefined>;\n  deleteTour(id: number): Promise<boolean>;\n\n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProductById(id: number): Promise<Product | undefined>;\n  getProductsByCategory(category: string): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: number): Promise<boolean>;\n\n  // Blog Posts\n  getAllBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPostById(id: number): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  getBlogPostsByCategory(category: string): Promise<BlogPost[]>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: number, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: number): Promise<boolean>;\n\n  // Contacts\n  getAllContacts(): Promise<Contact[]>;\n  getContactById(id: number): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContactStatus(id: number, status: string): Promise<Contact | undefined>;\n\n  // Bookings\n  getAllBookings(): Promise<Booking[]>;\n  getBookingById(id: number): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: number, status: string): Promise<Booking | undefined>;\n\n  // Cart\n  getCartItems(sessionId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: number, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: number): Promise<boolean>;\n  clearCart(sessionId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private regions: Map<number, Region>;\n  private tours: Map<number, Tour>;\n  private products: Map<number, Product>;\n  private blogPosts: Map<number, BlogPost>;\n  private contacts: Map<number, Contact>;\n  private bookings: Map<number, Booking>;\n  private cartItems: Map<number, CartItem>;\n  private currentUserId: number;\n  private currentRegionId: number;\n  private currentTourId: number;\n  private currentProductId: number;\n  private currentBlogPostId: number;\n  private currentContactId: number;\n  private currentBookingId: number;\n  private currentCartItemId: number;\n  \n  public sessionStore: session.SessionStore;\n\n  constructor() {\n    this.users = new Map();\n    this.regions = new Map();\n    this.tours = new Map();\n    this.products = new Map();\n    this.blogPosts = new Map();\n    this.contacts = new Map();\n    this.bookings = new Map();\n    this.cartItems = new Map();\n    this.currentUserId = 1;\n    this.currentRegionId = 1;\n    this.currentTourId = 1;\n    this.currentProductId = 1;\n    this.currentBlogPostId = 1;\n    this.currentContactId = 1;\n    this.currentBookingId = 1;\n    this.currentCartItemId = 1;\n\n    // Initialize session store for authentication\n    const MemoryStore = createMemoryStore(session);\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    });\n\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize with Georgian regions\n    const georgianRegions: InsertRegion[] = [\n      {\n        name: \"Kakheti\",\n        nameKa: \"·Éô·Éê·ÉÆ·Éî·Éó·Éò\",\n        nameRu: \"–ö–∞—Ö–µ—Ç–∏—è\",\n        description: \"The wine region of Georgia, home to ancient winemaking traditions and spectacular vineyard landscapes.\",\n        descriptionKa: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É¶·Éï·Éò·Éú·Éò·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò·É°·Éê ·Éì·Éê ·Éó·Éù·Éï·Éö·Éò·É° ·Éï·Éî·Éú·Éê·ÉÆ·Éî·Éë·Éò·É° ·É°·Éê·ÉÆ·Éö·Éò.\",\n        descriptionRu: \"–í–∏–Ω–æ–¥–µ–ª—å—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω –ì—Ä—É–∑–∏–∏, –¥–æ–º –¥—Ä–µ–≤–Ω–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –≤–∏–Ω–æ–¥–µ–ª–∏—è –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–µ–π–∑–∞–∂–µ–π.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        mainAttraction: \"Wine Tasting Tours\",\n        slug: \"kakheti\",\n        featured: true\n      },\n      {\n        name: \"Svaneti\",\n        nameKa: \"·É°·Éï·Éê·Éú·Éî·Éó·Éò\",\n        nameRu: \"–°–≤–∞–Ω–µ—Ç–∏—è\",\n        description: \"Ancient mountain region famous for its medieval defensive towers and pristine alpine landscapes.\",\n        descriptionKa: \"·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·Éõ·Éó·Éò·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·É®·É£·Éê·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·Éó·Éê·Éï·Éì·Éê·É™·Éï·Éò·Éó·Éò ·Éô·Éù·É®·Éô·Éî·Éë·Éò·Éó ·Éì·Éê ·Éë·É£·Éú·Éî·Éë·É†·Éò·Éï·Éò ·Éê·Éö·Éû·É£·É†·Éò ·Éû·Éî·Éò·Éñ·Éê·Éü·Éî·Éë·Éò·Éó.\",\n        descriptionRu: \"–î—Ä–µ–≤–Ω–∏–π –≥–æ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–º–∏ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–∞—à–Ω—è–º–∏ –∏ –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∞–ª—å–ø–∏–π—Å–∫–∏–º–∏ –ø–µ–π–∑–∞–∂–∞–º–∏.\",\n        imageUrl: \"https://pixabay.com/get/g346b7b7ab685519ea4030dc4396d64f6b8e2c640a39cfd2a124069f3b06120fa13d1ff947c96264ab1d9495a5a49e5f09db2bb267a285923445cbe4e9ca6536c_1280.jpg\",\n        mainAttraction: \"Mountain Hiking\",\n        slug: \"svaneti\",\n        featured: true\n      },\n      {\n        name: \"Samegrelo\",\n        nameKa: \"·É°·Éê·Éõ·Éî·Éí·É†·Éî·Éö·Éù\",\n        nameRu: \"–°–∞–º–µ–≥—Ä–µ–ª–æ\",\n        description: \"Coastal region known for its unique Megrelian cuisine and subtropical climate.\",\n        descriptionKa: \"·É°·Éê·Éú·Éê·Éû·Éò·É†·Éù ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éõ·Éî·Éí·É†·É£·Éö·Éò ·É°·Éê·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù·Éó·Éò ·Éì·Éê ·É°·É£·Éë·É¢·É†·Éù·Éû·Éò·Éô·É£·Éö·Éò ·Éô·Éö·Éò·Éõ·Éê·É¢·Éò·Éó.\",\n        descriptionRu: \"–ü—Ä–∏–±—Ä–µ–∂–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ–≥—Ä–µ–ª—å—Å–∫–æ–π –∫—É—Ö–Ω–µ–π –∏ —Å—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–º –∫–ª–∏–º–∞—Ç–æ–º.\",\n        imageUrl: \"https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        mainAttraction: \"Culinary Tours\",\n        slug: \"samegrelo\",\n        featured: true\n      },\n      {\n        name: \"Imereti\",\n        nameKa: \"·Éò·Éõ·Éî·É†·Éî·Éó·Éò\",\n        nameRu: \"–ò–º–µ—Ä–µ—Ç–∏—è\",\n        description: \"Historical heartland featuring ancient cave cities and traditional Georgian architecture.\",\n        descriptionKa: \"·Éò·É°·É¢·Éù·É†·Éò·É£·Éö·Éò ·É°·Éê·Éó·Éê·Éï·Éî, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·Éõ·Éù·Éò·É™·Éê·Éï·É° ·É£·É´·Éï·Éî·Éö·Éî·É° ·Éí·Éê·Éõ·Éù·É•·Éï·Éê·Éë·É£·Éö·Éò ·É•·Éê·Éö·Éê·É•·Éî·Éë·É° ·Éì·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö ·É•·Éê·É†·Éó·É£·Éö ·Éê·É†·É•·Éò·É¢·Éî·É•·É¢·É£·É†·Éê·É°.\",\n        descriptionRu: \"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–µ—Ä–¥—Ü–µ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –ø–µ—â–µ—Ä–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.\",\n        imageUrl: \"https://pixabay.com/get/gd35f027c66d20240d4bd7644af5b6a7ca6865713ea30f677bf1ffec2a800476c281cea1bf9dfd2b174f74b2947bf8b86a6bab7d2072436a17ef2783aa2b8cb26_1280.jpg\",\n        mainAttraction: \"Historical Sites\",\n        slug: \"imereti\",\n        featured: true\n      },\n      {\n        name: \"Racha\",\n        nameKa: \"·É†·Éê·É≠·Éê\",\n        nameRu: \"–†–∞—á–∞\",\n        description: \"Highland region renowned for its pristine nature and traditional mountain hospitality.\",\n        descriptionKa: \"·Éõ·Éó·Éò·Éê·Éú·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·É™·Éú·Éù·Éë·Éò·Éö·Éò·Éê ·Éó·Éê·Éï·Éò·É°·Éò ·Éë·É£·Éú·Éî·Éë·É†·Éò·Éï·Éò ·Éë·É£·Éú·Éî·Éë·Éò·Éó·Éê ·Éì·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·Éõ·Éó·Éò·É° ·É°·É¢·É£·Éõ·Éê·É†·Éõ·Éê·É°·Éû·Éò·Éú·É´·Éö·Éù·Éë·Éò·Éó.\",\n        descriptionRu: \"–ì–æ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –≥–æ—Ä–Ω—ã–º –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ–º.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        mainAttraction: \"Nature Tours\",\n        slug: \"racha\",\n        featured: false\n      },\n      {\n        name: \"Javakheti\",\n        nameKa: \"·ÉØ·Éê·Éï·Éê·ÉÆ·Éî·Éó·Éò\",\n        nameRu: \"–î–∂–∞–≤–∞—Ö–µ—Ç–∏\",\n        description: \"High plateau region with unique volcanic landscapes and nomadic heritage.\",\n        descriptionKa: \"·Éõ·Éê·É¶·Éê·Éö·Éò ·Éû·Éö·Éê·É¢·Éù·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éò ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éï·É£·Éö·Éô·Éê·Éú·É£·É†·Éò ·Éû·Éî·Éò·Éñ·Éê·Éü·Éî·Éë·Éò·Éó·Éê ·Éì·Éê ·Éú·Éù·Éõ·Éê·Éì·É£·É†·Éò ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·Éó.\",\n        descriptionRu: \"–í—ã—Å–æ–∫–æ–≥–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–æ —Ä–µ–≥–∏–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–µ–π–∑–∞–∂–∞–º–∏ –∏ –∫–æ—á–µ–≤—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º.\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        mainAttraction: \"Adventure Tours\",\n        slug: \"javakheti\",\n        featured: false\n      }\n    ];\n\n    // Initialize regions\n    georgianRegions.forEach(region => {\n      const newRegion: Region = { ...region, id: this.currentRegionId++ };\n      this.regions.set(newRegion.id, newRegion);\n    });\n\n    // Initialize tours\n    const tours: InsertTour[] = [\n      {\n        title: \"Kakheti Wine Heritage Tour\",\n        titleKa: \"·Éô·Éê·ÉÆ·Éî·Éó·Éò·É° ·É¶·Éï·Éò·Éú·Éò·É° ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·É° ·É¢·É£·É†·Éò\",\n        titleRu: \"–¢—É—Ä –≤–∏–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –ö–∞—Ö–µ—Ç–∏–∏\",\n        description: \"Experience traditional Georgian winemaking in ancient qvevri clay vessels. Includes tastings, cellar visits, and participation in wine pressing.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éê ·É´·Éï·Éî·Éö ·É•·Éï·Éî·Éï·É†·Éò·É° ·Éó·Éò·ÉÆ·Éò·É° ·É≠·É£·É†·É≠·Éî·Éö·É®·Éò. ·Éõ·Éù·Éò·É™·Éê·Éï·É° ·Éì·Éî·Éí·É£·É°·É¢·Éê·É™·Éò·Éê·É°, ·Éõ·Éê·É†·Éú·Éò·É° ·Éï·Éò·Éñ·Éò·É¢·É° ·Éì·Éê ·É¶·Éï·Éò·Éú·Éò·É° ·Éõ·Éù·É†·É¨·Éï·Éê·É®·Éò ·Éõ·Éù·Éú·Éê·É¨·Éò·Éö·Éî·Éù·Éë·Éê·É°.\",\n        descriptionRu: \"–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –≥—Ä—É–∑–∏–Ω—Å–∫–∏–º –≤–∏–Ω–æ–¥–µ–ª–∏–µ–º –≤ –¥—Ä–µ–≤–Ω–∏—Ö –≥–ª–∏–Ω—è–Ω—ã—Ö —Å–æ—Å—É–¥–∞—Ö –∫–≤–µ–≤—Ä–∏. –í–∫–ª—é—á–∞–µ—Ç –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏, –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–≥—Ä–µ–±–æ–≤ –∏ —É—á–∞—Å—Ç–∏–µ –≤ –¥–∞–≤–∫–µ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞.\",\n        price: \"89.00\",\n        duration: \"Full Day (8 hours)\",\n        maxPeople: 12,\n        includes: \"Traditional lunch included\",\n        includesKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·Éö·Éê·Éú·É©·Éò ·É®·Éî·Éì·Éò·É°\",\n        includesRu: \"–í–∫–ª—é—á–µ–Ω —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –æ–±–µ–¥\",\n        category: \"wine\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        regionId: 1,\n        featured: true\n      },\n      {\n        title: \"Authentic Cooking Experience\",\n        titleKa: \"·Éê·Éï·Éó·Éî·Éú·É¢·É£·É†·Éò ·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù·Éë·Éò·É° ·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éê\",\n        titleRu: \"–ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –æ–ø—ã—Ç\",\n        description: \"Learn to prepare traditional Georgian dishes like khachapuri and khinkali with local families. Take home recipes and techniques.\",\n        descriptionKa: \"·Éò·É°·É¨·Éê·Éï·Éö·Éî·Éó ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éô·Éî·É†·É´·Éî·Éë·Éò·É° ·Éõ·Éù·Éõ·Éñ·Éê·Éì·Éî·Éë·Éê, ·É†·Éù·Éí·Éù·É†·Éò·É™·Éê·Éê ·ÉÆ·Éê·É≠·Éê·Éû·É£·É†·Éò ·Éì·Éê ·ÉÆ·Éò·Éú·Éô·Éê·Éö·Éò ·Éê·Éì·Éí·Éò·Éö·Éù·Éë·É†·Éò·Éï ·Éù·ÉØ·Éê·ÉÆ·Éî·Éë·Éó·Éê·Éú ·Éî·É†·Éó·Éê·Éì. ·É¨·Éê·Éò·É¶·Éî·Éó ·É°·Éê·ÉÆ·Éö·É®·Éò ·É†·Éî·É™·Éî·Éû·É¢·Éî·Éë·Éò ·Éì·Éê ·É¢·Éî·É•·Éú·Éò·Éô·Éî·Éë·Éò.\",\n        descriptionRu: \"–ù–∞—É—á–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ –±–ª—é–¥–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ö–∞—á–∞–ø—É—Ä–∏ –∏ —Ö–∏–Ω–∫–∞–ª–∏, —Å –º–µ—Å—Ç–Ω—ã–º–∏ —Å–µ–º—å—è–º–∏. –ó–∞–±–µ—Ä–∏—Ç–µ –¥–æ–º–æ–π —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏.\",\n        price: \"65.00\",\n        duration: \"Half Day (4 hours)\",\n        maxPeople: 8,\n        includes: \"Recipe book included\",\n        includesKa: \"·É†·Éî·É™·Éî·Éû·É¢·Éî·Éë·Éò·É° ·É¨·Éò·Éí·Éú·Éò ·É®·Éî·Éì·Éò·É°\",\n        includesRu: \"–í–∫–ª—é—á–µ–Ω–∞ –∫–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤\",\n        category: \"culinary\",\n        imageUrl: \"https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        regionId: 3,\n        featured: true\n      },\n      {\n        title: \"Svaneti Heritage Trek\",\n        titleKa: \"·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·É° ·É¢·É†·Éî·Éô·Éò\",\n        titleRu: \"–ü–æ—Ö–æ–¥ –ø–æ –Ω–∞—Å–ª–µ–¥–∏—é –°–≤–∞–Ω–µ—Ç–∏–∏\",\n        description: \"Explore ancient defensive towers and pristine mountain landscapes. Experience traditional Svan hospitality and mountain culture.\",\n        descriptionKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É£·É´·Éï·Éî·Éö·Éî·É° ·Éó·Éê·Éï·Éì·Éê·É™·Éï·Éò·Éó ·Éô·Éù·É®·Éô·Éî·Éë·Éò ·Éì·Éê ·Éë·É£·Éú·Éî·Éë·É†·Éò·Éï·Éò ·Éõ·Éó·Éò·É° ·Éû·Éî·Éò·Éñ·Éê·Éü·Éî·Éë·Éò. ·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É°·Éï·Éê·Éú·É£·É†·Éò ·É°·É¢·É£·Éõ·Éê·É†·Éõ·Éê·É°·Éû·Éò·Éú·É´·Éö·Éù·Éë·Éê ·Éì·Éê ·Éõ·Éó·Éò·É° ·Éô·É£·Éö·É¢·É£·É†·Éê.\",\n        descriptionRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞—à–Ω–∏ –∏ –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏. –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º —Å–≤–∞–Ω—Å–∫–∏–º –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ–º –∏ –≥–æ—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π.\",\n        price: \"120.00\",\n        duration: \"2 Days / 1 Night\",\n        maxPeople: 10,\n        includes: \"Guesthouse accommodation\",\n        includesKa: \"·É°·Éê·É°·É¢·É£·Éõ·É†·Éù·É° ·É°·Éê·É™·ÉÆ·Éù·Éï·É†·Éî·Éë·Éî·Éö·Éò\",\n        includesRu: \"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥–æ—Å—Ç–µ–≤–æ–º –¥–æ–º–µ\",\n        category: \"adventure\",\n        imageUrl: \"https://pixabay.com/get/g557f845fe2dd020d6a0a2d9c88633869487f9d1165ce31839f0bf5c33776c480667ea1263998dba2646928b6e6279a7406ec8e35ceeca6d98947c245805d1f54_1280.jpg\",\n        regionId: 2,\n        featured: true\n      }\n    ];\n\n    tours.forEach(tour => {\n      const newTour: Tour = { ...tour, id: this.currentTourId++ };\n      this.tours.set(newTour.id, newTour);\n    });\n\n    // Initialize products\n    const products: InsertProduct[] = [\n      {\n        name: \"Kakheti Saperavi 2020\",\n        nameKa: \"·Éô·Éê·ÉÆ·Éî·Éó·Éò·É° ·É°·Éê·É§·Éî·É†·Éê·Éï·Éò 2020\",\n        nameRu: \"–ö–∞—Ö–µ—Ç–∏–Ω—Å–∫–∏–π –°–∞–ø–µ—Ä–∞–≤–∏ 2020\",\n        description: \"Premium red wine from traditional qvevri fermentation\",\n        descriptionKa: \"·Éû·É†·Éî·Éõ·Éò·É£·Éõ ·É¨·Éò·Éó·Éî·Éö·Éò ·É¶·Éï·Éò·Éú·Éù ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éï·Éî·Éï·É†·Éò·É° ·É§·Éî·É†·Éõ·Éî·Éú·É¢·Éê·É™·Éò·Éò·Éì·Éê·Éú\",\n        descriptionRu: \"–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –∫–≤–µ–≤—Ä–∏\",\n        price: \"24.99\",\n        category: \"wine\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"Handmade Ceramic Set\",\n        nameKa: \"·ÉÆ·Éî·Éö·Éú·Éê·Éô·Éî·Éó·Éò ·Éô·Éî·É†·Éê·Éõ·Éò·Éô·É£·Éö·Éò ·Éú·Éê·Éô·É†·Éî·Éë·Éò\",\n        nameRu: \"–ù–∞–±–æ—Ä –∫–µ—Ä–∞–º–∏–∫–∏ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã\",\n        description: \"Traditional Georgian pottery, handcrafted by local artisans\",\n        descriptionKa: \"·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·É≠·É£·É†·É≠·Éî·Éö·Éò, ·ÉÆ·Éî·Éö·Éú·Éê·Éô·Éî·Éó·Éò ·Éê·Éì·Éí·Éò·Éö·Éù·Éë·É†·Éò·Éï·Éò ·ÉÆ·Éî·Éö·Éù·É°·Éú·Éî·Éë·Éò·É° ·Éõ·Éò·Éî·É†\",\n        descriptionRu: \"–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∞, –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è –º–µ—Å—Ç–Ω—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏\",\n        price: \"45.00\",\n        category: \"crafts\",\n        imageUrl: \"https://pixabay.com/get/g91afe9039e81e33a0e716be0a14794038342bdfc0060c916bf0b574f8a9d67e582891d95529e45c5b08f4c6198f2c122_1280.jpg\",\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"Mountain Honey Collection\",\n        nameKa: \"·Éõ·Éó·Éò·É° ·Éó·Éê·É§·Éö·Éò·É° ·Éô·Éù·Éö·Éî·É•·É™·Éò·Éê\",\n        nameRu: \"–ö–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ä–Ω–æ–≥–æ –º–µ–¥–∞\",\n        description: \"Pure wildflower honey from Georgian highlands\",\n        descriptionKa: \"·É°·É£·É§·Éó·Éê ·Éï·Éî·Éö·É£·É†·Éò ·Éß·Éï·Éê·Éï·Éò·Éö·Éî·Éë·Éò·É° ·Éó·Éê·É§·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éõ·Éó·Éî·Éë·Éò·Éì·Éê·Éú\",\n        descriptionRu: \"–ß–∏—Å—Ç—ã–π –º–µ–¥ –∏–∑ –¥–∏–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –≥—Ä—É–∑–∏–Ω—Å–∫–∏—Ö –≤—ã—Å–æ–∫–æ–≥–æ—Ä–∏–π\",\n        price: \"18.50\",\n        category: \"food\",\n        imageUrl: \"https://images.unsplash.com/photo-1558642452-9d2a7deb7f62?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        inStock: true,\n        featured: true\n      },\n      {\n        name: \"Wool Carpet Runner\",\n        nameKa: \"·Éõ·Éê·É¢·Éê·É†·É¶·Éê·Éë·Éò·É° ·Éú·Éê·ÉÆ·Éî·Éï·É†·Éê·Éì·Éò\",\n        nameRu: \"–®–µ—Ä—Å—Ç—è–Ω–∞—è –∫–æ–≤—Ä–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞\",\n        description: \"Hand-woven carpet with traditional Georgian patterns\",\n        descriptionKa: \"·ÉÆ·Éî·Éö·Éò·Éó ·Éú·Éê·É•·É°·Éù·Éï·Éò ·É¶·Éê·Éë·Éê·Éì·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éú·Éò·Éõ·É£·É®·Éî·Éë·Éò·Éó\",\n        descriptionRu: \"–ö–æ–≤–µ—Ä —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–º–∏ —É–∑–æ—Ä–∞–º–∏\",\n        price: \"89.00\",\n        category: \"crafts\",\n        imageUrl: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        inStock: true,\n        featured: false\n      }\n    ];\n\n    products.forEach(product => {\n      const newProduct: Product = { ...product, id: this.currentProductId++ };\n      this.products.set(newProduct.id, newProduct);\n    });\n\n    // Initialize blog posts\n    const blogPosts: InsertBlogPost[] = [\n      {\n        title: \"The Sacred Art of Georgian Supra\",\n        titleKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·É°·É£·É§·É†·Éò·É° ·É¨·Éõ·Éò·Éú·Éì·Éê ·ÉÆ·Éî·Éö·Éù·Éï·Éú·Éî·Éë·Éê\",\n        titleRu: \"–°–≤—è—â–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ —Å—É–ø—Ä–∞\",\n        excerpt: \"Discover the profound cultural significance of the Georgian feast tradition, where every toast carries meaning and community bonds are strengthened...\",\n        excerptKa: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éñ·Éò·Éê·Éï·Éê·É†·Éù·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éò·É° ·É¶·É†·Éõ·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éê, ·É°·Éê·Éì·Éê·É™ ·Éß·Éù·Éï·Éî·Éö·Éò ·É¢·Éù·É°·É¢·Éò ·Éê·É¢·Éê·É†·Éî·Éë·É° ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éê·É° ·Éì·Éê ·É°·Éê·Éñ·Éù·Éí·Éê·Éì·Éù·Éî·Éë·É†·Éò·Éï·Éò ·Éë·Éõ·Éî·Éë·Éò ·É´·Éö·Éò·Éî·É†·Éì·Éî·Éë·Éê...\",\n        excerptRu: \"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –≥–ª—É–±–æ–∫–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∑–∞—Å—Ç–æ–ª—å—è, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–æ—Å—Ç –Ω–µ—Å–µ—Ç —Å–º—ã—Å–ª –∏ —É–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏...\",\n        content: \"The Georgian supra is much more than a simple meal...\",\n        contentKa: \"·É•·Éê·É†·Éó·É£·Éö·Éò ·É°·É£·É§·É†·Éê ·Éë·Éî·Éï·É†·Éê·Éì ·Éõ·Éî·É¢·Éò·Éê, ·Éï·Éò·Éì·É†·Éî ·É£·Éë·É†·Éê·Éö·Éù ·Éô·Éî·É†·É´·Éò...\",\n        contentRu: \"–ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ —Å—É–ø—Ä–∞ - —ç—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–∞—è –µ–¥–∞...\",\n        category: \"Traditions\",\n        imageUrl: \"https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        slug: \"georgian-supra\",\n        published: true,\n        publishedAt: new Date('2024-03-15')\n      },\n      {\n        title: \"8000 Years of Winemaking Legacy\",\n        titleKa: \"·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° 8000 ·É¨·Éö·Éò·É° ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éê\",\n        titleRu: \"8000 –ª–µ—Ç –Ω–∞—Å–ª–µ–¥–∏—è –≤–∏–Ω–æ–¥–µ–ª–∏—è\",\n        excerpt: \"Journey through Georgia's ancient winemaking heritage, from the first qvevri vessels to UNESCO recognition of traditional methods...\",\n        excerptKa: \"·Éò·Éõ·Éù·Éí·Éñ·Éê·É£·É†·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É£·É´·Éï·Éî·Éö·Éî·É° ·É¶·Éï·Éò·Éú·Éò·É° ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éê·É®·Éò, ·Éû·Éò·É†·Éï·Éî·Éö·Éò ·É•·Éï·Éî·Éï·É†·Éî·Éë·Éò·Éì·Éê·Éú UNESCO-·É° ·Éê·É¶·Éò·Éê·É†·Éî·Éë·É£·Éö·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·Éõ·Éî·Éó·Éù·Éì·Éî·Éë·Éê·Éõ·Éì·Éî...\",\n        excerptRu: \"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –¥—Ä–µ–≤–Ω–µ–º—É –≤–∏–Ω–æ–¥–µ–ª—å—á–µ—Å–∫–æ–º—É –Ω–∞—Å–ª–µ–¥–∏—é –ì—Ä—É–∑–∏–∏, –æ—Ç –ø–µ—Ä–≤—ã—Ö —Å–æ—Å—É–¥–æ–≤ –∫–≤–µ–≤—Ä–∏ –¥–æ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –Æ–ù–ï–°–ö–û —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...\",\n        content: \"Georgia's winemaking tradition spans over 8000 years...\",\n        contentKa: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É¶·Éï·Éò·Éú·Éò·É° ·Éì·Éê·Éõ·Éñ·Éê·Éì·Éî·Éë·Éò·É° ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éê 8000 ·É¨·Éî·Éö·Éñ·Éî ·Éõ·Éî·É¢·Éò·Éê...\",\n        contentRu: \"–¢—Ä–∞–¥–∏—Ü–∏—è –≤–∏–Ω–æ–¥–µ–ª–∏—è –≤ –ì—Ä—É–∑–∏–∏ –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ 8000 –ª–µ—Ç...\",\n        category: \"Heritage\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n        slug: \"winemaking-legacy\",\n        published: true,\n        publishedAt: new Date('2024-03-10')\n      },\n      {\n        title: \"Guardians of the Mountains: Svan Towers\",\n        titleKa: \"·Éõ·Éó·Éî·Éë·Éò·É° ·Éõ·É™·Éï·Éî·Éö·Éî·Éë·Éò: ·É°·Éï·Éê·Éú·É£·É†·Éò ·Éô·Éù·É®·Éô·Éî·Éë·Éò\",\n        titleRu: \"–°—Ç—Ä–∞–∂–∏ –≥–æ—Ä: –°–≤–∞–Ω—Å–∫–∏–µ –±–∞—à–Ω–∏\",\n        excerpt: \"Explore the defensive architecture of Upper Svaneti, where medieval stone towers stand as testaments to resilience and community protection...\",\n        excerptKa: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·Éñ·Éî·Éõ·Éù ·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·Éó·Éê·Éï·Éì·Éê·É™·Éï·Éò·Éó·Éò ·Éê·É†·É•·Éò·É¢·Éî·É•·É¢·É£·É†·Éê, ·É°·Éê·Éì·Éê·É™ ·É®·É£·Éê·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·É•·Éï·Éò·É° ·Éô·Éù·É®·Éô·Éî·Éë·Éò ·Éì·Éí·Éê·Éú·Éê·Éú, ·É†·Éù·Éí·Éù·É†·É™ ·Éõ·Éì·Éí·É†·Éê·Éì·Éù·Éë·Éò·É°·Éê ·Éì·Éê ·É°·Éê·Éñ·Éù·Éí·Éê·Éì·Éù·Éî·Éë·Éò·É° ·Éì·Éê·É™·Éï·Éò·É° ·Éõ·Éù·É¨·Éõ·Éî·Éî·Éë·Éò...\",\n        excerptRu: \"–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –í–µ—Ä—Ö–Ω–µ–π –°–≤–∞–Ω–µ—Ç–∏–∏, –≥–¥–µ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–µ –∫–∞–º–µ–Ω–Ω—ã–µ –±–∞—à–Ω–∏ —Å—Ç–æ—è—Ç –∫–∞–∫ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...\",\n        content: \"The Svan towers of Upper Svaneti represent one of the most unique architectural achievements...\",\n        contentKa: \"·Éñ·Éî·Éõ·Éù ·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·É°·Éï·Éê·Éú·É£·É†·Éò ·Éô·Éù·É®·Éô·Éî·Éë·Éò ·É¨·Éê·É†·Éõ·Éù·Éê·Éì·Éí·Éî·Éú·É° ·Éî·É†·Éó-·Éî·É†·Éó ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·É£·Éú·Éò·Éô·Éê·Éö·É£·É† ·Éê·É†·É•·Éò·É¢·Éî·É•·É¢·É£·É†·É£·Éö ·Éõ·Éò·É¶·É¨·Éî·Éï·Éê·É°...\",\n        contentRu: \"–°–≤–∞–Ω—Å–∫–∏–µ –±–∞—à–Ω–∏ –í–µ—Ä—Ö–Ω–µ–π –°–≤–∞–Ω–µ—Ç–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...\",\n        category: \"Architecture\",\n        imageUrl: \"https://pixabay.com/get/g7078e8099237048b8b5ec84f44a6872444c8bfbb9d2265a963a6143916091211a95ef5f77eb687c671a1f12632c45596214d5065f3af9b0ce7bfda81617b0cf7_1280.jpg\",\n        slug: \"svan-towers\",\n        published: true,\n        publishedAt: new Date('2024-03-05')\n      }\n    ];\n\n    blogPosts.forEach(post => {\n      const newPost: BlogPost = { ...post, id: this.currentBlogPostId++, createdAt: post.publishedAt };\n      this.blogPosts.set(newPost.id, newPost);\n    });\n  }\n\n  // User methods (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.id === id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = await this.getUser(userData.id);\n    \n    if (existingUser) {\n      const updatedUser: User = {\n        ...existingUser,\n        ...userData,\n        updatedAt: new Date(),\n      };\n      this.users.set(userData.id, updatedUser);\n      return updatedUser;\n    } else {\n      const newUser: User = {\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(userData.id, newUser);\n      return newUser;\n    }\n  }\n\n  // New authentication methods for username/password auth\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(userData: { username: string; email: string; password: string; firstName?: string; lastName?: string; role?: string }): Promise<User> {\n    const id = `user_${this.currentUserId++}`;\n    const newUser: User = {\n      id,\n      username: userData.username,\n      email: userData.email,\n      passwordHash: userData.password, // Will be hashed by auth layer\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: null,\n      role: userData.role || 'user',\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, newUser);\n    return newUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser> & { newPassword?: string }): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const updateData: any = { ...userData };\n    delete updateData.newPassword; // Handle password separately if needed\n    \n    const updatedUser = { \n      ...user, \n      ...updateData,\n      updatedAt: new Date() \n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, role, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserStatus(id: string, isActive: boolean): Promise<User | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, isActive, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Region methods\n  async getAllRegions(): Promise<Region[]> {\n    return Array.from(this.regions.values());\n  }\n\n  async getRegionById(id: number): Promise<Region | undefined> {\n    return this.regions.get(id);\n  }\n\n  async getRegionBySlug(slug: string): Promise<Region | undefined> {\n    return Array.from(this.regions.values()).find(region => region.slug === slug);\n  }\n\n  async createRegion(region: InsertRegion): Promise<Region> {\n    const id = this.currentRegionId++;\n    const newRegion: Region = { ...region, id };\n    this.regions.set(id, newRegion);\n    return newRegion;\n  }\n\n  async updateRegion(id: number, region: Partial<InsertRegion>): Promise<Region | undefined> {\n    const existing = this.regions.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...region };\n    this.regions.set(id, updated);\n    return updated;\n  }\n\n  async deleteRegion(id: number): Promise<boolean> {\n    return this.regions.delete(id);\n  }\n\n  // Tour methods\n  async getAllTours(): Promise<Tour[]> {\n    return Array.from(this.tours.values());\n  }\n\n  async getTourById(id: number): Promise<Tour | undefined> {\n    return this.tours.get(id);\n  }\n\n  async getToursByRegion(regionId: number): Promise<Tour[]> {\n    return Array.from(this.tours.values()).filter(tour => tour.regionId === regionId);\n  }\n\n  async getToursByCategory(category: string): Promise<Tour[]> {\n    return Array.from(this.tours.values()).filter(tour => tour.category === category);\n  }\n\n  async getFeaturedTours(): Promise<Tour[]> {\n    return Array.from(this.tours.values()).filter(tour => tour.featured);\n  }\n\n  async createTour(tour: InsertTour): Promise<Tour> {\n    const id = this.currentTourId++;\n    const newTour: Tour = { ...tour, id };\n    this.tours.set(id, newTour);\n    return newTour;\n  }\n\n  async updateTour(id: number, tour: Partial<InsertTour>): Promise<Tour | undefined> {\n    const existing = this.tours.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...tour };\n    this.tours.set(id, updated);\n    return updated;\n  }\n\n  async deleteTour(id: number): Promise<boolean> {\n    return this.tours.delete(id);\n  }\n\n  // Product methods\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values());\n  }\n\n  async getProductById(id: number): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(product => product.category === category);\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(product => product.featured);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = this.currentProductId++;\n    const newProduct: Product = { ...product, id };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...product };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Blog methods\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values());\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values()).filter(post => post.published);\n  }\n\n  async getBlogPostById(id: number): Promise<BlogPost | undefined> {\n    return this.blogPosts.get(id);\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    return Array.from(this.blogPosts.values()).find(post => post.slug === slug);\n  }\n\n  async getBlogPostsByCategory(category: string): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values()).filter(post => post.category === category);\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const id = this.currentBlogPostId++;\n    const newPost: BlogPost = { ...post, id, createdAt: new Date() };\n    this.blogPosts.set(id, newPost);\n    return newPost;\n  }\n\n  async updateBlogPost(id: number, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    const existing = this.blogPosts.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...post };\n    this.blogPosts.set(id, updated);\n    return updated;\n  }\n\n  async deleteBlogPost(id: number): Promise<boolean> {\n    return this.blogPosts.delete(id);\n  }\n\n  // Contact methods\n  async getAllContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getContactById(id: number): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(contact: InsertContact): Promise<Contact> {\n    const id = this.currentContactId++;\n    const newContact: Contact = { ...contact, id, createdAt: new Date() };\n    this.contacts.set(id, newContact);\n    return newContact;\n  }\n\n  async updateContactStatus(id: number, status: string): Promise<Contact | undefined> {\n    const existing = this.contacts.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, status };\n    this.contacts.set(id, updated);\n    return updated;\n  }\n\n  // Booking methods\n  async getAllBookings(): Promise<Booking[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBookingById(id: number): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const id = this.currentBookingId++;\n    const newBooking: Booking = { ...booking, id, createdAt: new Date() };\n    this.bookings.set(id, newBooking);\n    return newBooking;\n  }\n\n  async updateBookingStatus(id: number, status: string): Promise<Booking | undefined> {\n    const existing = this.bookings.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, status };\n    this.bookings.set(id, updated);\n    return updated;\n  }\n\n  // Cart methods\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const existingItem = Array.from(this.cartItems.values()).find(\n      cartItem => cartItem.sessionId === item.sessionId && cartItem.productId === item.productId\n    );\n\n    if (existingItem) {\n      // Update quantity\n      const updated = { ...existingItem, quantity: existingItem.quantity + item.quantity };\n      this.cartItems.set(existingItem.id, updated);\n      return updated;\n    } else {\n      // Add new item\n      const id = this.currentCartItemId++;\n      const newItem: CartItem = { ...item, id, createdAt: new Date() };\n      this.cartItems.set(id, newItem);\n      return newItem;\n    }\n  }\n\n  async updateCartItem(id: number, quantity: number): Promise<CartItem | undefined> {\n    const existing = this.cartItems.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, quantity };\n    this.cartItems.set(id, updated);\n    return updated;\n  }\n\n  async removeFromCart(id: number): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    const items = Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n    items.forEach(item => this.cartItems.delete(item.id));\n    return true;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // New authentication methods for username/password auth\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: { username: string; email: string; password: string; firstName?: string; lastName?: string; role?: string }): Promise<User> {\n    const id = uuidv4();\n    const newUser: User = {\n      id,\n      username: userData.username,\n      email: userData.email,\n      passwordHash: userData.password, // Will be hashed by auth layer\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: null,\n      role: userData.role || 'user',\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const [user] = await db\n      .insert(users)\n      .values(newUser)\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser> & { newPassword?: string }): Promise<User | undefined> {\n    const updateData: any = { ...userData };\n    delete updateData.newPassword; // Handle password separately if needed\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async updateUserStatus(id: string, isActive: boolean): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isActive, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async getAllRegions(): Promise<Region[]> {\n    return await db.select().from(regions);\n  }\n\n  async getRegionById(id: number): Promise<Region | undefined> {\n    const [region] = await db.select().from(regions).where(eq(regions.id, id));\n    return region || undefined;\n  }\n\n  async getRegionBySlug(slug: string): Promise<Region | undefined> {\n    const [region] = await db.select().from(regions).where(eq(regions.slug, slug));\n    return region || undefined;\n  }\n\n  async createRegion(region: InsertRegion): Promise<Region> {\n    const [newRegion] = await db\n      .insert(regions)\n      .values(region)\n      .returning();\n    return newRegion;\n  }\n\n  async updateRegion(id: number, region: Partial<InsertRegion>): Promise<Region | undefined> {\n    const [updatedRegion] = await db\n      .update(regions)\n      .set(region)\n      .where(eq(regions.id, id))\n      .returning();\n    return updatedRegion || undefined;\n  }\n\n  async deleteRegion(id: number): Promise<boolean> {\n    const result = await db.delete(regions).where(eq(regions.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllTours(): Promise<Tour[]> {\n    return await db.select().from(tours);\n  }\n\n  async getTourById(id: number): Promise<Tour | undefined> {\n    const [tour] = await db.select().from(tours).where(eq(tours.id, id));\n    return tour || undefined;\n  }\n\n  async getToursByRegion(regionId: number): Promise<Tour[]> {\n    return await db.select().from(tours).where(eq(tours.regionId, regionId));\n  }\n\n  async getToursByCategory(category: string): Promise<Tour[]> {\n    return await db.select().from(tours).where(eq(tours.category, category));\n  }\n\n  async getFeaturedTours(): Promise<Tour[]> {\n    return await db.select().from(tours).where(eq(tours.featured, true));\n  }\n\n  async createTour(tour: InsertTour): Promise<Tour> {\n    const [newTour] = await db\n      .insert(tours)\n      .values(tour)\n      .returning();\n    return newTour;\n  }\n\n  async updateTour(id: number, tour: Partial<InsertTour>): Promise<Tour | undefined> {\n    const [updatedTour] = await db\n      .update(tours)\n      .set(tour)\n      .where(eq(tours.id, id))\n      .returning();\n    return updatedTour || undefined;\n  }\n\n  async deleteTour(id: number): Promise<boolean> {\n    const result = await db.delete(tours).where(eq(tours.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProductById(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.category, category));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.featured, true));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(product)\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct || undefined;\n  }\n\n  async deleteProduct(id: number): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts);\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).where(eq(blogPosts.published, true));\n  }\n\n  async getBlogPostById(id: number): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.id, id));\n    return post || undefined;\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.slug, slug));\n    return post || undefined;\n  }\n\n  async getBlogPostsByCategory(category: string): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).where(eq(blogPosts.category, category));\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const [newPost] = await db\n      .insert(blogPosts)\n      .values(post)\n      .returning();\n    return newPost;\n  }\n\n  async updateBlogPost(id: number, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    const [updatedPost] = await db\n      .update(blogPosts)\n      .set(post)\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updatedPost || undefined;\n  }\n\n  async deleteBlogPost(id: number): Promise<boolean> {\n    const result = await db.delete(blogPosts).where(eq(blogPosts.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getAllContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts);\n  }\n\n  async getContactById(id: number): Promise<Contact | undefined> {\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    return contact || undefined;\n  }\n\n  async createContact(contact: InsertContact): Promise<Contact> {\n    const [newContact] = await db\n      .insert(contacts)\n      .values(contact)\n      .returning();\n    return newContact;\n  }\n\n  async updateContactStatus(id: number, status: string): Promise<Contact | undefined> {\n    const [updatedContact] = await db\n      .update(contacts)\n      .set({ status })\n      .where(eq(contacts.id, id))\n      .returning();\n    return updatedContact || undefined;\n  }\n\n  async getAllBookings(): Promise<Booking[]> {\n    return await db.select().from(bookings);\n  }\n\n  async getBookingById(id: number): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking || undefined;\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db\n      .insert(bookings)\n      .values(booking)\n      .returning();\n    return newBooking;\n  }\n\n  async updateBookingStatus(id: number, status: string): Promise<Booking | undefined> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set({ status })\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking || undefined;\n  }\n\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.sessionId, sessionId));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    const [newItem] = await db\n      .insert(cartItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async updateCartItem(id: number, quantity: number): Promise<CartItem | undefined> {\n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updatedItem || undefined;\n  }\n\n  async removeFromCart(id: number): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return result.rowCount > 0;\n  }\n\n  async clearCart(sessionId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.sessionId, sessionId));\n    return result.rowCount > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":46371},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, decimal, timestamp, varchar, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - supports both Replit Auth and username/password authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  username: varchar(\"username\").unique(),\n  email: varchar(\"email\").unique(),\n  passwordHash: varchar(\"password_hash\"), // for username/password auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // user, admin\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const regions = pgTable(\"regions\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  nameKa: text(\"name_ka\"), // Georgian name\n  nameRu: text(\"name_ru\"), // Russian name\n  description: text(\"description\").notNull(),\n  descriptionKa: text(\"description_ka\"),\n  descriptionRu: text(\"description_ru\"),\n  imageUrl: text(\"image_url\").notNull(),\n  mainAttraction: text(\"main_attraction\").notNull(),\n  location: text(\"location\"), // Geographic location\n  locationKa: text(\"location_ka\"),\n  locationRu: text(\"location_ru\"),\n  bestTimeToVisit: text(\"best_time_to_visit\"), // Best time to visit\n  bestTimeToVisitKa: text(\"best_time_to_visit_ka\"),\n  bestTimeToVisitRu: text(\"best_time_to_visit_ru\"),\n  climate: text(\"climate\"), // Climate information\n  climateKa: text(\"climate_ka\"),\n  climateRu: text(\"climate_ru\"),\n  howToReach: text(\"how_to_reach\"), // Transportation info\n  howToReachKa: text(\"how_to_reach_ka\"),\n  howToReachRu: text(\"how_to_reach_ru\"),\n  slug: text(\"slug\").notNull().unique(),\n  featured: boolean(\"featured\").default(false),\n});\n\nexport const tours = pgTable(\"tours\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  titleKa: text(\"title_ka\"),\n  titleRu: text(\"title_ru\"),\n  description: text(\"description\").notNull(),\n  descriptionKa: text(\"description_ka\"),\n  descriptionRu: text(\"description_ru\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  duration: text(\"duration\").notNull(),\n  maxPeople: integer(\"max_people\").notNull(),\n  includes: text(\"includes\").notNull(),\n  includesKa: text(\"includes_ka\"),\n  includesRu: text(\"includes_ru\"),\n  category: text(\"category\").notNull(), // wine, culinary, cultural, adventure\n  imageUrl: text(\"image_url\").notNull(),\n  regionId: integer(\"region_id\").references(() => regions.id),\n  featured: boolean(\"featured\").default(false),\n});\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  nameKa: text(\"name_ka\"),\n  nameRu: text(\"name_ru\"),\n  description: text(\"description\").notNull(),\n  descriptionKa: text(\"description_ka\"),\n  descriptionRu: text(\"description_ru\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(), // wine, food, crafts, souvenirs\n  imageUrl: text(\"image_url\").notNull(),\n  inStock: boolean(\"in_stock\").default(true),\n  featured: boolean(\"featured\").default(false),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  titleKa: text(\"title_ka\"),\n  titleRu: text(\"title_ru\"),\n  excerpt: text(\"excerpt\").notNull(),\n  excerptKa: text(\"excerpt_ka\"),\n  excerptRu: text(\"excerpt_ru\"),\n  content: text(\"content\").notNull(),\n  contentKa: text(\"content_ka\"),\n  contentRu: text(\"content_ru\"),\n  category: text(\"category\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  published: boolean(\"published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  interest: text(\"interest\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"new\"), // new, responded, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  tourId: integer(\"tour_id\").references(() => tours.id).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  numberOfPeople: integer(\"number_of_people\").notNull(),\n  preferredDate: text(\"preferred_date\").notNull(),\n  specialRequests: text(\"special_requests\"),\n  status: text(\"status\").default(\"pending\"), // pending, confirmed, cancelled\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: text(\"session_id\").notNull(),\n  productId: integer(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas - includes password for registration\nexport const insertUserSchema = createInsertSchema(users).omit({ createdAt: true, updatedAt: true, passwordHash: true }).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\")\n});\nexport const upsertUserSchema = createInsertSchema(users).omit({ createdAt: true, updatedAt: true });\nexport const insertRegionSchema = createInsertSchema(regions).omit({ id: true });\nexport const insertTourSchema = createInsertSchema(tours).omit({ id: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true });\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({ id: true, createdAt: true });\nexport const insertContactSchema = createInsertSchema(contacts).omit({ id: true, createdAt: true });\nexport const insertBookingSchema = createInsertSchema(bookings).omit({ id: true, createdAt: true });\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\n\nexport type Region = typeof regions.$inferSelect;\nexport type InsertRegion = z.infer<typeof insertRegionSchema>;\n\nexport type Tour = typeof tours.$inferSelect;\nexport type InsertTour = z.infer<typeof insertTourSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\n\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n","size_bytes":7610},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/hooks/useLanguage\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/Home\";\nimport Regions from \"@/pages/Regions\";\nimport RegionDetail from \"@/pages/RegionDetail\";\nimport Tours from \"@/pages/Tours\";\nimport Store from \"@/pages/Store\";\nimport Blog from \"@/pages/Blog\";\nimport Contact from \"@/pages/Contact\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/regions\" component={Regions} />\n      <Route path=\"/regions/:slug\" component={RegionDetail} />\n      <Route path=\"/tours\" component={Tours} />\n      <Route path=\"/store\" component={Store} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/blog/:slug\" component={Blog} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <LanguageProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </LanguageProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1769},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(43, 48%, 96%); /* georgian-cream */\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(342, 77%, 30%); /* georgian-wine */\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(32, 41%, 64%); /* georgian-gold */\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --georgian-wine: hsl(342, 77%, 30%);\n  --georgian-gold: hsl(32, 41%, 64%);\n  --georgian-terracotta: hsl(14, 43%, 56%);\n  --georgian-cream: hsl(43, 48%, 96%);\n  --georgian-gray: hsl(220, 9%, 46%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(342, 77%, 30%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(32, 41%, 64%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Playfair Display', serif;\n  }\n}\n\n@layer components {\n  .georgian-wine {\n    color: var(--georgian-wine);\n  }\n  \n  .bg-georgian-wine {\n    background-color: var(--georgian-wine);\n  }\n  \n  .georgian-gold {\n    color: var(--georgian-gold);\n  }\n  \n  .bg-georgian-gold {\n    background-color: var(--georgian-gold);\n  }\n  \n  .georgian-terracotta {\n    color: var(--georgian-terracotta);\n  }\n  \n  .bg-georgian-terracotta {\n    background-color: var(--georgian-terracotta);\n  }\n  \n  .georgian-cream {\n    color: var(--georgian-cream);\n  }\n  \n  .bg-georgian-cream {\n    background-color: var(--georgian-cream);\n  }\n  \n  .georgian-gray {\n    color: var(--georgian-gray);\n  }\n  \n  .bg-georgian-gray {\n    background-color: var(--georgian-gray);\n  }\n\n  /* Custom scrollbar styles */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar {\n    height: 8px;\n    width: 8px;\n  }\n  \n  .scrollbar-thumb-georgian-wine::-webkit-scrollbar-thumb {\n    background-color: var(--georgian-wine);\n    border-radius: 4px;\n  }\n  \n  .scrollbar-track-gray-200::-webkit-scrollbar-track {\n    background-color: #e5e7eb;\n    border-radius: 4px;\n  }\n}\n","size_bytes":3267},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { HelmetProvider } from 'react-helmet-async';\nimport App from \"./App\";\nimport { LanguageProvider } from \"./hooks/useLanguage\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <HelmetProvider>\n    <LanguageProvider>\n      <App />\n    </LanguageProvider>\n  </HelmetProvider>\n);\n","size_bytes":360},"client/src/components/BlogCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowRight } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport type { BlogPost } from '@shared/schema';\n\ninterface BlogCardProps {\n  post: BlogPost;\n}\n\nexport default function BlogCard({ post }: BlogCardProps) {\n  const { language } = useLanguage();\n\n  const getTitle = () => {\n    switch (language) {\n      case 'ka': return post.titleKa || post.title;\n      case 'ru': return post.titleRu || post.title;\n      default: return post.title;\n    }\n  };\n\n  const getExcerpt = () => {\n    switch (language) {\n      case 'ka': return post.excerptKa || post.excerpt;\n      case 'ru': return post.excerptRu || post.excerpt;\n      default: return post.excerpt;\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return '';\n    return new Date(date).toLocaleDateString(language === 'ka' ? 'ka-GE' : language === 'ru' ? 'ru-RU' : 'en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getCategoryColor = () => {\n    switch (post.category.toLowerCase()) {\n      case 'traditions': return 'bg-georgian-gold/20 text-georgian-wine';\n      case 'heritage': return 'bg-georgian-terracotta/20 text-georgian-wine';\n      case 'architecture': return 'bg-green-100 text-georgian-wine';\n      default: return 'bg-georgian-gold/20 text-georgian-wine';\n    }\n  };\n\n  return (\n    <article className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n      <img\n        src={post.imageUrl}\n        alt={getTitle()}\n        className=\"w-full h-48 object-cover\"\n      />\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-3\">\n          <Badge className={getCategoryColor()}>\n            {post.category}\n          </Badge>\n          <span className=\"text-sm georgian-gray ml-3\">\n            {formatDate(post.publishedAt)}\n          </span>\n        </div>\n        <h3 className=\"text-xl font-serif font-bold georgian-wine mb-3\">\n          {getTitle()}\n        </h3>\n        <p className=\"georgian-gray mb-4\">\n          {getExcerpt()}\n        </p>\n        <Link\n          href={`/blog/${post.slug}`}\n          className=\"georgian-wine hover:georgian-terracotta font-semibold transition-colors inline-flex items-center\"\n        >\n          {getTranslation('common.readMore', language)}\n          <ArrowRight className=\"ml-1 h-4 w-4\" />\n        </Link>\n      </CardContent>\n    </article>\n  );\n}\n","size_bytes":2577},"client/src/components/ContactForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function ContactForm() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    interest: '',\n    message: ''\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest('POST', '/api/contact', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message! We will get back to you soon.\",\n      });\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        interest: '',\n        message: ''\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    contactMutation.mutate(formData);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg\">\n      <CardContent className=\"p-8\">\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"firstName\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n                {getTranslation('contact.firstName', language)}\n              </Label>\n              <Input\n                id=\"firstName\"\n                value={formData.firstName}\n                onChange={(e) => handleChange('firstName', e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n                {getTranslation('contact.lastName', language)}\n              </Label>\n              <Input\n                id=\"lastName\"\n                value={formData.lastName}\n                onChange={(e) => handleChange('lastName', e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n              {getTranslation('contact.email', language)}\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleChange('email', e.target.value)}\n              className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n              {getTranslation('contact.phone', language)}\n            </Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => handleChange('phone', e.target.value)}\n              className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"interest\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n              Area of Interest\n            </Label>\n            <Select value={formData.interest} onValueChange={(value) => handleChange('interest', value)}>\n              <SelectTrigger className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent\">\n                <SelectValue placeholder=\"Select your interest\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"wine-tours\">Wine Tours</SelectItem>\n                <SelectItem value=\"culinary\">Culinary Experiences</SelectItem>\n                <SelectItem value=\"cultural\">Cultural Heritage Tours</SelectItem>\n                <SelectItem value=\"adventure\">Adventure Tourism</SelectItem>\n                <SelectItem value=\"custom\">Custom Experience</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"message\" className=\"block text-sm font-semibold georgian-wine mb-2\">\n              {getTranslation('contact.message', language)}\n            </Label>\n            <Textarea\n              id=\"message\"\n              value={formData.message}\n              onChange={(e) => handleChange('message', e.target.value)}\n              rows={4}\n              className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-georgian-wine focus:border-transparent resize-none\"\n              placeholder=\"Tell us about your ideal Georgian experience...\"\n              required\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={contactMutation.isPending}\n            className=\"w-full bg-georgian-wine hover:bg-georgian-wine/90 text-white py-4 text-lg font-semibold\"\n          >\n            {contactMutation.isPending ? 'Sending...' : getTranslation('contact.submit', language)}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6473},"client/src/components/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport FlagLanguageSelector from '@/components/FlagLanguageSelector';\n\nexport default function Footer() {\n  const { language } = useLanguage();\n\n  return (\n    <footer className=\"bg-georgian-wine text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          <div>\n            <h3 className=\"text-2xl font-serif font-bold mb-6\">Georgian Heritage</h3>\n            <p className=\"text-gray-300 mb-6\">\n              {getTranslation('footer.description', language)}\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-youtube\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-white transition-colors\">\n                <i className=\"fab fa-tripadvisor\"></i>\n              </a>\n            </div>\n            \n            {/* Language Selector in Footer */}\n            <div className=\"mt-6\">\n              <h4 className=\"text-sm font-semibold mb-3 text-gray-300\">Language</h4>\n              <FlagLanguageSelector \n                triggerClassName=\"w-auto bg-white/10 border-white/20 text-white hover:bg-white/20\" \n                className=\"bg-white\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">{getTranslation('nav.regions', language)}</h4>\n            <ul className=\"space-y-3 text-gray-300\">\n              <li><Link href=\"/regions/kakheti\" className=\"hover:text-white transition-colors\">Kakheti</Link></li>\n              <li><Link href=\"/regions/svaneti\" className=\"hover:text-white transition-colors\">Svaneti</Link></li>\n              <li><Link href=\"/regions/samegrelo\" className=\"hover:text-white transition-colors\">Samegrelo</Link></li>\n              <li><Link href=\"/regions/imereti\" className=\"hover:text-white transition-colors\">Imereti</Link></li>\n              <li><Link href=\"/regions/racha\" className=\"hover:text-white transition-colors\">Racha</Link></li>\n              <li><Link href=\"/regions/javakheti\" className=\"hover:text-white transition-colors\">Javakheti</Link></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Experiences</h4>\n            <ul className=\"space-y-3 text-gray-300\">\n              <li><Link href=\"/tours\" className=\"hover:text-white transition-colors\">Wine Tours</Link></li>\n              <li><Link href=\"/tours\" className=\"hover:text-white transition-colors\">Culinary Classes</Link></li>\n              <li><Link href=\"/tours\" className=\"hover:text-white transition-colors\">Cultural Tours</Link></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Virtual Tours</a></li>\n              <li><Link href=\"/store\" className=\"hover:text-white transition-colors\">Online Store</Link></li>\n              <li><Link href=\"/tours\" className=\"hover:text-white transition-colors\">Custom Tours</Link></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Company</h4>\n            <ul className=\"space-y-3 text-gray-300\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">About Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Our Team</a></li>\n              <li><Link href=\"/blog\" className=\"hover:text-white transition-colors\">{getTranslation('nav.blog', language)}</Link></li>\n              <li><Link href=\"/contact\" className=\"hover:text-white transition-colors\">{getTranslation('nav.contact', language)}</Link></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-red-800 mt-12 pt-8 text-center\">\n          <p className=\"text-gray-300\">\n            ¬© 2024 Georgian Heritage. All rights reserved. | Crafted with love for Georgian culture.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4696},"client/src/components/Header.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Menu, X, ShoppingCart, User, LogOut } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport logoImage from '@assets/logo_1759066508494.jpeg';\nimport FlagLanguageSelector from '@/components/FlagLanguageSelector';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { useAuth } from '@/hooks/useAuth';\nimport { getTranslation, Language } from '@/lib/i18n';\nimport { useQuery } from '@tanstack/react-query';\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { language, setLanguage } = useLanguage();\n  const { user, isAuthenticated, isLoading, logout, isAdmin } = useAuth();\n\n  // Cart items count\n  const { data: cartItems = [] } = useQuery({\n    queryKey: ['/api/cart'],\n    refetchInterval: 5000, // Refresh cart every 5 seconds\n  });\n\n  const cartCount = cartItems.reduce((sum: number, item: any) => sum + item.quantity, 0);\n\n  const navigation = [\n    { href: '/', key: 'nav.home' },\n    { href: '/regions', key: 'nav.regions' },\n    { href: '/tours', key: 'nav.tours' },\n    { href: '/store', key: 'nav.store' },\n    { href: '/blog', key: 'nav.blog' },\n    { href: '/contact', key: 'nav.contact' },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') return location === '/';\n    return location.startsWith(href);\n  };\n\n  return (\n    <header className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <img \n                  src={logoImage} \n                  alt=\"Georgian Heritage\" \n                  className=\"h-12 w-auto cursor-pointer\"\n                  data-testid=\"header-logo\"\n                />\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              {navigation.map(({ href, key }) => (\n                <Link\n                  key={href}\n                  href={href}\n                  className={`font-medium transition-colors ${\n                    isActive(href)\n                      ? 'georgian-wine'\n                      : 'georgian-gray hover:georgian-wine'\n                  }`}\n                >\n                  {getTranslation(key, language)}\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Selector */}\n            <FlagLanguageSelector \n              triggerClassName=\"w-auto border-none bg-transparent georgian-gray px-2\"\n            />\n\n            {/* Shopping Cart */}\n            <Link href=\"/store\">\n              <Button variant=\"ghost\" className=\"relative p-2 georgian-gray hover:georgian-wine\">\n                <ShoppingCart className=\"h-5 w-5\" />\n                {cartCount > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-georgian-wine text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {cartCount}\n                  </span>\n                )}\n              </Button>\n            </Link>\n\n            {/* Authentication */}\n            {!isLoading && (\n              <>\n                {isAuthenticated ? (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                        {user?.profileImageUrl ? (\n                          <img\n                            className=\"h-8 w-8 rounded-full object-cover\"\n                            src={user.profileImageUrl}\n                            alt=\"Profile\"\n                          />\n                        ) : (\n                          <User className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                      <DropdownMenuItem className=\"flex flex-col items-start\">\n                        <div className=\"text-sm font-medium\">\n                          {user?.firstName || user?.lastName \n                            ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                            : 'Welcome!'}\n                        </div>\n                        {user?.email && (\n                          <div className=\"text-xs text-muted-foreground\">{user.email}</div>\n                        )}\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      {isAdmin && (\n                        <>\n                          <DropdownMenuItem asChild>\n                            <Link href=\"/admin\" className=\"flex items-center\">\n                              <User className=\"mr-2 h-4 w-4\" />\n                              <span>Admin Panel</span>\n                            </Link>\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                        </>\n                      )}\n                      <DropdownMenuItem onClick={logout}>\n                        <LogOut className=\"mr-2 h-4 w-4\" />\n                        <span>Log out</span>\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                ) : (\n                  <div className=\"hidden md:flex items-center space-x-2\">\n                    <Link href=\"/login\">\n                      <Button variant=\"ghost\" className=\"text-georgian-gray hover:text-georgian-wine\">\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\">\n                        Sign Up\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </>\n            )}\n\n            {/* Mobile menu button */}\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"georgian-gray hover:georgian-wine\"\n              >\n                {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t\">\n              {navigation.map(({ href, key }) => (\n                <Link\n                  key={href}\n                  href={href}\n                  className={`block px-3 py-2 text-base font-medium transition-colors ${\n                    isActive(href)\n                      ? 'georgian-wine'\n                      : 'georgian-gray hover:georgian-wine'\n                  }`}\n                  onClick={() => setIsMenuOpen(false)}\n                >\n                  {getTranslation(key, language)}\n                </Link>\n              ))}\n              \n              {/* Mobile Authentication */}\n              {!isLoading && (\n                <div className=\"border-t pt-2 mt-2\">\n                  {isAuthenticated ? (\n                    <>\n                      <div className=\"px-3 py-2 text-sm font-medium text-georgian-wine\">\n                        {user?.firstName || user?.lastName \n                          ? `${user.firstName || ''} ${user.lastName || ''}`.trim()\n                          : 'Welcome!'}\n                      </div>\n                      {isAdmin && (\n                        <Link\n                          href=\"/admin\"\n                          className=\"block px-3 py-2 text-base font-medium text-georgian-gray hover:text-georgian-wine\"\n                          onClick={() => setIsMenuOpen(false)}\n                        >\n                          <User className=\"inline mr-2 h-4 w-4\" />\n                          Admin Panel\n                        </Link>\n                      )}\n                      <button\n                        onClick={() => {\n                          setIsMenuOpen(false);\n                          logout();\n                        }}\n                        className=\"block w-full text-left px-3 py-2 text-base font-medium text-georgian-gray hover:text-georgian-wine\"\n                      >\n                        <LogOut className=\"inline mr-2 h-4 w-4\" />\n                        Log out\n                      </button>\n                    </>\n                  ) : (\n                    <>\n                      <Link\n                        href=\"/login\"\n                        className=\"block px-3 py-2 text-base font-medium text-georgian-gray hover:text-georgian-wine\"\n                        onClick={() => setIsMenuOpen(false)}\n                      >\n                        Sign In\n                      </Link>\n                      <Link\n                        href=\"/register\"\n                        className=\"block px-3 py-2 text-base font-medium text-white bg-georgian-wine hover:bg-georgian-wine/90 rounded mx-3 text-center\"\n                        onClick={() => setIsMenuOpen(false)}\n                      >\n                        Sign Up\n                      </Link>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}\n","size_bytes":9986},"client/src/components/HeroSection.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport { Play } from 'lucide-react';\n\nexport default function HeroSection() {\n  const { language } = useLanguage();\n\n  const handleStartExploring = () => {\n    document.getElementById('regions')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleWatchVideo = () => {\n    // TODO: Implement virtual tour modal\n    alert('Virtual tour feature will be implemented with 360¬∞ panoramic views');\n  };\n\n  return (\n    <section className=\"relative h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background Image */}\n      <div\n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `url('https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080')`\n        }}\n      />\n      <div className=\"absolute inset-0 bg-black bg-opacity-40\" />\n\n      <div className=\"relative z-10 text-center text-white max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-serif font-bold mb-6\">\n          {getTranslation('hero.title', language)}\n          <br />\n          <span className=\"georgian-gold\">{language === 'ka' ? '·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éê' : language === 'ru' ? '–ù–∞—Å–ª–µ–¥–∏–µ' : 'Heritage'}</span>\n        </h1>\n        <p className=\"text-lg md:text-xl lg:text-2xl mb-8 font-light max-w-3xl mx-auto\">\n          {getTranslation('hero.subtitle', language)}\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            onClick={handleStartExploring}\n            className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-8 py-4 text-lg font-semibold\"\n            size=\"lg\"\n          >\n            {getTranslation('hero.cta.explore', language)}\n          </Button>\n          <Button\n            onClick={handleWatchVideo}\n            variant=\"outline\"\n            className=\"border-2 border-white bg-transparent text-white hover:bg-white hover:text-black px-8 py-4 text-lg font-semibold backdrop-blur-sm\"\n            size=\"lg\"\n          >\n            <Play className=\"mr-2 h-5 w-5\" />\n            {getTranslation('hero.cta.video', language)}\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2442},"client/src/components/ProductCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Product } from '@shared/schema';\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const getName = () => {\n    switch (language) {\n      case 'ka': return product.nameKa || product.name;\n      case 'ru': return product.nameRu || product.name;\n      default: return product.name;\n    }\n  };\n\n  const getDescription = () => {\n    switch (language) {\n      case 'ka': return product.descriptionKa || product.description;\n      case 'ru': return product.descriptionRu || product.description;\n      default: return product.description;\n    }\n  };\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      const sessionId = localStorage.getItem('sessionId') || 'anonymous';\n      return apiRequest('POST', '/api/cart', {\n        productId: product.id,\n        quantity: 1\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Added to Cart\",\n        description: `${getName()} has been added to your cart.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleAddToCart = () => {\n    if (!product.inStock) return;\n    addToCartMutation.mutate();\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg overflow-hidden group\">\n      <img\n        src={product.imageUrl}\n        alt={getName()}\n        className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform\"\n        loading=\"lazy\"\n        decoding=\"async\"\n      />\n      <CardContent className=\"p-4\">\n        <h3 className=\"text-lg font-serif font-bold georgian-wine mb-2\">\n          {getName()}\n        </h3>\n        <p className=\"text-sm georgian-gray mb-3\">\n          {getDescription()}\n        </p>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-xl font-bold georgian-wine\">\n            ${product.price}\n          </span>\n          <Button\n            onClick={handleAddToCart}\n            disabled={!product.inStock || addToCartMutation.isPending}\n            className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-4 py-2 text-sm font-semibold\"\n          >\n            {addToCartMutation.isPending ? 'Adding...' : getTranslation('common.addToCart', language)}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3007},"client/src/components/RegionCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { ArrowRight } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport type { Region } from '@shared/schema';\n\ninterface RegionCardProps {\n  region: Region;\n}\n\nexport default function RegionCard({ region }: RegionCardProps) {\n  const { language } = useLanguage();\n\n  const getName = () => {\n    switch (language) {\n      case 'ka': return region.nameKa || region.name;\n      case 'ru': return region.nameRu || region.name;\n      default: return region.name;\n    }\n  };\n\n  const getDescription = () => {\n    switch (language) {\n      case 'ka': return region.descriptionKa || region.description;\n      case 'ru': return region.descriptionRu || region.description;\n      default: return region.description;\n    }\n  };\n\n  return (\n    <Link href={`/regions/${region.slug}`}>\n      <div className=\"group cursor-pointer\">\n        <Card className=\"bg-white rounded-xl shadow-lg overflow-hidden transition-transform group-hover:scale-105\">\n          <img\n            src={region.imageUrl}\n            alt={getName()}\n            className=\"w-full h-48 object-cover\"\n            loading=\"lazy\"\n            decoding=\"async\"\n          />\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-2\">\n              {getName()}\n            </h3>\n            <p className=\"georgian-gray mb-4\">\n              {getDescription()}\n            </p>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"georgian-terracotta font-semibold\">\n                {region.mainAttraction}\n              </span>\n              <ArrowRight className=\"h-5 w-5 georgian-wine group-hover:translate-x-1 transition-transform\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":1901},"client/src/components/TourCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Clock, Users, Utensils, Bed } from 'lucide-react';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport type { Tour } from '@shared/schema';\n\ninterface TourCardProps {\n  tour: Tour;\n}\n\nexport default function TourCard({ tour }: TourCardProps) {\n  const { language } = useLanguage();\n\n  const getTitle = () => {\n    switch (language) {\n      case 'ka': return tour.titleKa || tour.title;\n      case 'ru': return tour.titleRu || tour.title;\n      default: return tour.title;\n    }\n  };\n\n  const getDescription = () => {\n    switch (language) {\n      case 'ka': return tour.descriptionKa || tour.description;\n      case 'ru': return tour.descriptionRu || tour.description;\n      default: return tour.description;\n    }\n  };\n\n  const getIncludes = () => {\n    switch (language) {\n      case 'ka': return tour.includesKa || tour.includes;\n      case 'ru': return tour.includesRu || tour.includes;\n      default: return tour.includes;\n    }\n  };\n\n  const getCategoryColor = () => {\n    switch (tour.category) {\n      case 'wine': return 'bg-georgian-gold/20 text-georgian-wine';\n      case 'culinary': return 'bg-georgian-terracotta/20 text-georgian-wine';\n      case 'cultural': return 'bg-blue-100 text-georgian-wine';\n      case 'adventure': return 'bg-green-100 text-georgian-wine';\n      default: return 'bg-georgian-gold/20 text-georgian-wine';\n    }\n  };\n\n  const handleBookTour = () => {\n    // TODO: Implement booking modal\n    alert(`Booking system will be implemented for tour: ${tour.title}`);\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100\">\n      <img\n        src={tour.imageUrl}\n        alt={getTitle()}\n        className=\"w-full h-48 object-cover\"\n        loading=\"lazy\"\n        decoding=\"async\"\n      />\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Badge className={getCategoryColor()}>\n            {tour.category.charAt(0).toUpperCase() + tour.category.slice(1)}\n          </Badge>\n          <span className=\"text-2xl font-bold georgian-wine\">\n            ${tour.price}\n          </span>\n        </div>\n        \n        <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-3\">\n          {getTitle()}\n        </h3>\n        \n        <p className=\"georgian-gray mb-4\">\n          {getDescription()}\n        </p>\n        \n        <div className=\"space-y-2 mb-6\">\n          <div className=\"flex items-center text-sm georgian-gray\">\n            <Clock className=\"mr-2 h-4 w-4 georgian-terracotta\" />\n            <span>{tour.duration}</span>\n          </div>\n          <div className=\"flex items-center text-sm georgian-gray\">\n            <Users className=\"mr-2 h-4 w-4 georgian-terracotta\" />\n            <span>Max {tour.maxPeople} people</span>\n          </div>\n          <div className=\"flex items-center text-sm georgian-gray\">\n            {tour.category === 'adventure' ? (\n              <Bed className=\"mr-2 h-4 w-4 georgian-terracotta\" />\n            ) : (\n              <Utensils className=\"mr-2 h-4 w-4 georgian-terracotta\" />\n            )}\n            <span>{getIncludes()}</span>\n          </div>\n        </div>\n\n        <Button\n          onClick={handleBookTour}\n          className=\"w-full bg-georgian-wine hover:bg-georgian-wine/90 text-white py-3 font-semibold\"\n        >\n          {getTranslation('common.bookNow', language)}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3654},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useLanguage.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\nimport { Language } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":771},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"export interface Translations {\n  [key: string]: {\n    en: string;\n    ka: string;\n    ru: string;\n  };\n}\n\nexport const translations: Translations = {\n  // Navigation\n  'nav.home': { en: 'Home', ka: '·Éõ·Éó·Éê·Éï·Éê·É†·Éò', ru: '–ì–ª–∞–≤–Ω–∞—è' },\n  'nav.regions': { en: 'Regions', ka: '·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò', ru: '–†–µ–≥–∏–æ–Ω—ã' },\n  'nav.tours': { en: 'Tours', ka: '·É¢·É£·É†·Éî·Éë·Éò', ru: '–¢—É—Ä—ã' },\n  'nav.store': { en: 'Store', ka: '·Éõ·Éê·É¶·Éê·Éñ·Éò·Éê', ru: '–ú–∞–≥–∞–∑–∏–Ω' },\n  'nav.blog': { en: 'Blog', ka: '·Éë·Éö·Éù·Éí·Éò', ru: '–ë–ª–æ–≥' },\n  'nav.contact': { en: 'Contact', ka: '·Éô·Éù·Éú·É¢·Éê·É•·É¢·Éò', ru: '–ö–æ–Ω—Ç–∞–∫—Ç' },\n\n  // Hero Section\n  'hero.title': { \n    en: 'Discover Georgia\\'s Ethnographic', \n    ka: '·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éî·Éó·Éú·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò', \n    ru: '–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ' \n  },\n  'hero.subtitle': { \n    en: 'Explore ancient regions, taste traditional cuisine, and experience the rich cultural tapestry of Georgia', \n    ka: '·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É£·É´·Éï·Éî·Éö·Éî·É°·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò, ·Éí·Éê·Éõ·Éù·É™·Éê·Éì·Éî·Éó ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É°·Éê·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù ·Éì·Éê ·Éí·Éê·Éõ·Éù·Éò·É™·Éê·Éì·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éõ·Éì·Éò·Éì·Éê·É†·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éú·Éê·É•·É°·Éù·Éï·Éò', \n    ru: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é –∫—É—Ö–Ω—é –∏ –æ—â—É—Ç–∏—Ç–µ –±–æ–≥–∞—Ç–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ –ì—Ä—É–∑–∏–∏' \n  },\n  'hero.cta.explore': { en: 'Start Exploring', ka: '·Éì·Éê·Éò·É¨·Éß·Éî·Éó ·Éí·Éê·Éõ·Éù·Éô·Éï·Éö·Éî·Éï·Éê', ru: '–ù–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ' },\n  'hero.cta.video': { en: 'Watch Virtual Tour', ka: '·Éï·Éò·É†·É¢·É£·Éê·Éö·É£·É†·Éò ·É¢·É£·É†·Éò', ru: '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä' },\n\n  // Common\n  'common.readMore': { en: 'Read More', ka: '·Éõ·Éî·É¢·Éò·É° ·Éú·Éê·ÉÆ·Éï·Éê', ru: '–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ' },\n  'common.viewAll': { en: 'View All', ka: '·Éß·Éï·Éî·Éö·Éê·É° ·Éú·Éê·ÉÆ·Éï·Éê', ru: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ' },\n  'common.addToCart': { en: 'Add to Cart', ka: '·Éô·Éê·Éö·Éê·Éó·Éê·É®·Éò ·Éì·Éê·Éõ·Éê·É¢·Éî·Éë·Éê', ru: '–í –∫–æ—Ä–∑–∏–Ω—É' },\n  'common.bookNow': { en: 'Book Now', ka: '·ÉØ·Éê·Éï·É®·Éú·Éê', ru: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' },\n  'common.loading': { en: 'Loading...', ka: '·Éò·É¢·Éï·Éò·É†·Éó·Éî·Éë·Éê...', ru: '–ó–∞–≥—Ä—É–∑–∫–∞...' },\n  'common.error': { en: 'Something went wrong', ka: '·É†·Éê·É¶·Éê·É™ ·Éê·É†·Éê·É°·É¨·Éù·É†·Éò·Éê', ru: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' },\n\n  // Contact Form\n  'contact.firstName': { en: 'First Name', ka: '·É°·Éê·ÉÆ·Éî·Éö·Éò', ru: '–ò–º—è' },\n  'contact.lastName': { en: 'Last Name', ka: '·Éí·Éï·Éê·É†·Éò', ru: '–§–∞–º–∏–ª–∏—è' },\n  'contact.email': { en: 'Email Address', ka: '·Éî·Éö-·É§·Éù·É°·É¢·Éê', ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞' },\n  'contact.phone': { en: 'Phone Number', ka: '·É¢·Éî·Éö·Éî·É§·Éù·Éú·Éò', ru: '–¢–µ–ª–µ—Ñ–æ–Ω' },\n  'contact.message': { en: 'Message', ka: '·É®·Éî·É¢·Éß·Éù·Éë·Éò·Éú·Éî·Éë·Éê', ru: '–°–æ–æ–±—â–µ–Ω–∏–µ' },\n  'contact.submit': { en: 'Send Message', ka: '·É®·Éî·É¢·Éß·Éù·Éë·Éò·Éú·Éî·Éë·Éò·É° ·Éí·Éê·Éí·Éñ·Éê·Éï·Éú·Éê', ru: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' },\n\n  // Footer\n  'footer.description': { \n    en: 'Discover the authentic beauty and rich cultural heritage of Georgia\\'s ethnographic regions through immersive experiences and traditional hospitality.', \n    ka: '·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éî·Éó·Éú·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò·É° ·Éê·Éï·Éó·Éî·Éú·É¢·Éò·Éô·É£·É†·Éò ·É°·Éò·Éö·Éê·Éõ·Éê·Éñ·Éî ·Éì·Éê ·Éõ·Éì·Éò·Éì·Éê·É†·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éê ·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éî·Éë·Éò·É°·Éê ·Éì·Éê ·É¢·É†·Éê·Éì·Éò·É™·Éò·É£·Éö·Éò ·É°·É¢·É£·Éõ·Éê·É†·Éõ·Éê·É°·Éû·Éò·Éú·É´·Éö·Éù·Éë·Éò·É° ·É°·Éê·É®·É£·Éê·Éö·Éî·Éë·Éò·Éó.', \n    ru: '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ø–æ–¥–ª–∏–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É –∏ –±–æ–≥–∞—Ç–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ì—Ä—É–∑–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–≥—Ä—É–∂–∞—é—â–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ.' \n  },\n\n  // Regions Page\n  regions_title: {\n    en: \"Georgian Regions\",\n    ka: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò\",\n    ru: \"–†–µ–≥–∏–æ–Ω—ã –ì—Ä—É–∑–∏–∏\"\n  },\n  regions_description: {\n    en: \"Explore the diverse ethnographic regions of Georgia, each with unique traditions, landscapes, and cultural heritage.\",\n    ka: \"·Éí·Éê·Éõ·Éù·Éò·Éô·Éï·Éö·Éò·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éõ·É†·Éê·Éï·Éê·Éö·É§·Éî·É†·Éù·Éï·Éê·Éú·Éò ·Éî·Éó·Éú·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò, ·Éó·Éò·Éó·Éù·Éî·É£·Éö·Éò ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò·Éó, ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·Éò·Éó ·Éì·Éê ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éò·Éó.\",\n    ru: \"–ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ì—Ä—É–∑–∏–∏, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏, –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º.\"\n  },\n  regions_hero_title: {\n    en: \"Discover Georgia's Regions\",\n    ka: \"·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò\",\n    ru: \"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–µ–≥–∏–æ–Ω—ã –ì—Ä—É–∑–∏–∏\"\n  },\n  regions_hero_subtitle: {\n    en: \"Journey through the diverse landscapes and rich cultural heritage of Georgia's ethnographic regions\",\n    ka: \"·Éò·Éõ·Éù·Éí·Éñ·Éê·É£·É†·Éî·Éó ·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éî·Éó·Éú·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò·É° ·Éõ·É†·Éê·Éï·Éê·Éö·É§·Éî·É†·Éù·Éï·Éê·Éú ·Éö·Éê·Éú·Éì·É®·Éê·É§·É¢·Éî·Éë·É°·Éê ·Éì·Éê ·Éõ·Éì·Éò·Éì·Éê·É† ·Éô·É£·Éö·É¢·É£·É†·É£·Éö ·Éõ·Éî·Éõ·Éô·Éï·Éò·Éì·É†·Éî·Éù·Éë·Éê·É®·Éò\",\n    ru: \"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞–º –∏ –±–æ–≥–∞—Ç–æ–º—É –∫—É–ª—å—Ç—É—Ä–Ω–æ–º—É –Ω–∞—Å–ª–µ–¥–∏—é —ç—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –ì—Ä—É–∑–∏–∏\"\n  },\n  regions_about_title: {\n    en: \"Georgia's Cultural Diversity\",\n    ka: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éõ·É†·Éê·Éï·Éê·Éö·É§·Éî·É†·Éù·Éï·Éú·Éî·Éë·Éê\",\n    ru: \"–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ì—Ä—É–∑–∏–∏\"\n  },\n  regions_about_content: {\n    en: \"Georgia's ethnographic regions represent centuries of unique cultural development, each shaped by its geographical location, historical influences, and local traditions. From the wine valleys of Kakheti to the highland settlements of Svaneti, every region tells its own story through architecture, cuisine, folklore, and customs that have been preserved for generations.\",\n    ka: \"·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù·É° ·Éî·Éó·Éú·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éî·Éë·Éò ·É¨·Éê·É†·Éõ·Éù·Éê·Éì·Éí·Éî·Éú·Éî·Éú ·É°·Éê·É£·Éô·É£·Éú·Éî·Éî·Éë·Éò·É° ·É£·Éú·Éò·Éô·Éê·Éö·É£·É†·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éí·Éê·Éú·Éï·Éò·Éó·Éê·É†·Éî·Éë·Éò·É° ·É®·Éî·Éì·Éî·Éí·É°, ·Éó·Éò·Éó·Éù·Éî·É£·Éö·Éò ·É©·Éê·Éõ·Éù·Éß·Éê·Éö·Éò·Éë·Éî·Éë·É£·Éö·Éò ·Éó·Éê·Éï·Éò·É°·Éò ·Éí·Éî·Éù·Éí·É†·Éê·É§·Éò·É£·Éö·Éò ·Éõ·Éì·Éî·Éë·Éê·É†·Éî·Éù·Éë·Éò·Éó, ·Éò·É°·É¢·Éù·É†·Éò·É£·Éö·Éò ·Éí·Éê·Éï·Éö·Éî·Éú·Éò·Éó ·Éì·Éê ·Éê·Éì·Éí·Éò·Éö·Éù·Éë·É†·Éò·Éï·Éò ·É¢·É†·Éê·Éì·Éò·É™·Éò·Éî·Éë·Éò·Éó. ·Éô·Éê·ÉÆ·Éî·Éó·Éò·É° ·É¶·Éï·Éò·Éú·Éò·É° ·ÉÆ·Éî·Éù·Éë·Éî·Éë·Éò·Éì·Éê·Éú ·É°·Éï·Éê·Éú·Éî·Éó·Éò·É° ·Éõ·Éó·Éò·É° ·Éì·Éê·É°·Éê·ÉÆ·Éö·Éî·Éë·Éî·Éë·Éê·Éõ·Éì·Éî, ·Éß·Éù·Éï·Éî·Éö·Éò ·É†·Éî·Éí·Éò·Éù·Éú·Éò ·Éó·ÉÆ·É†·Éù·Éë·É° ·Éó·Éê·Éï·Éò·É° ·Éò·É°·É¢·Éù·É†·Éò·Éê·É° ·Éê·É†·É•·Éò·É¢·Éî·É•·É¢·É£·É†·Éò·É°, ·É°·Éê·Éõ·Éñ·Éê·É†·Éî·É£·Éö·Éù·É°, ·É§·Éù·Éö·Éô·Éö·Éù·É†·Éò·É°·Éê ·Éì·Éê ·É©·Éï·Éî·É£·Éö·Éî·Éë·Éî·Éë·Éò·É° ·Éõ·Éî·É®·Éï·Éî·Éù·Éë·Éò·Éó, ·É†·Éù·Éõ·Éö·Éî·Éë·Éò·É™ ·Éó·Éê·Éù·Éë·Éî·Éë·Éò·É°·Éó·Éï·Éò·É° ·É®·Éî·Éú·Éê·É†·É©·É£·Éú·Éî·Éë·É£·Éö·Éò·Éê.\",\n    ru: \"–≠—Ç–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –ì—Ä—É–∑–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ–∫–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–≤–æ–∏–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤–ª–∏—è–Ω–∏—è–º–∏ –∏ –º–µ—Å—Ç–Ω—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏. –û—Ç –≤–∏–Ω–Ω—ã—Ö –¥–æ–ª–∏–Ω –ö–∞—Ö–µ—Ç–∏–∏ –¥–æ –≥–æ—Ä–Ω—ã—Ö –ø–æ—Å–µ–ª–µ–Ω–∏–π –°–≤–∞–Ω–µ—Ç–∏–∏, –∫–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –∫—É—Ö–Ω—é, —Ñ–æ–ª—å–∫–ª–æ—Ä –∏ –æ–±—ã—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏.\"\n  }\n};\n\nexport type Language = 'en' | 'ka' | 'ru';\n\nexport function getTranslation(key: string, lang: Language): string {\n  return translations[key]?.[lang] || translations[key]?.en || key;\n}\n","size_bytes":8851},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Blog.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport BlogCard from '@/components/BlogCard';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Calendar, User } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport type { BlogPost } from '@shared/schema';\n\nexport default function Blog() {\n  const { slug } = useParams<{ slug?: string }>();\n  const { language } = useLanguage();\n\n  const { data: blogPosts = [], isLoading: postsLoading } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog'],\n  });\n\n  const { data: currentPost, isLoading: postLoading } = useQuery<BlogPost>({\n    queryKey: [`/api/blog/${slug}`],\n    enabled: !!slug,\n  });\n\n  const getTitle = (post: BlogPost) => {\n    switch (language) {\n      case 'ka': return post.titleKa || post.title;\n      case 'ru': return post.titleRu || post.title;\n      default: return post.title;\n    }\n  };\n\n  const getContent = (post: BlogPost) => {\n    switch (language) {\n      case 'ka': return post.contentKa || post.content;\n      case 'ru': return post.contentRu || post.content;\n      default: return post.content;\n    }\n  };\n\n  const getExcerpt = (post: BlogPost) => {\n    switch (language) {\n      case 'ka': return post.excerptKa || post.excerpt;\n      case 'ru': return post.excerptRu || post.excerpt;\n      default: return post.excerpt;\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return '';\n    return new Date(date).toLocaleDateString(language === 'ka' ? 'ka-GE' : language === 'ru' ? 'ru-RU' : 'en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'traditions': return 'bg-georgian-gold/20 text-georgian-wine';\n      case 'heritage': return 'bg-georgian-terracotta/20 text-georgian-wine';\n      case 'architecture': return 'bg-green-100 text-georgian-wine';\n      default: return 'bg-georgian-gold/20 text-georgian-wine';\n    }\n  };\n\n  const categories = [...new Set(blogPosts.map(post => post.category))];\n  const relatedPosts = slug && currentPost \n    ? blogPosts.filter(post => post.category === currentPost.category && post.slug !== slug).slice(0, 3)\n    : [];\n\n  // Single blog post view\n  if (slug) {\n    if (postLoading) {\n      return (\n        <>\n          <Header />\n          <div className=\"min-h-screen bg-georgian-cream\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n              <Skeleton className=\"h-8 w-32 mb-8\" />\n              <Skeleton className=\"h-12 w-full mb-4\" />\n              <Skeleton className=\"h-4 w-48 mb-8\" />\n              <Skeleton className=\"h-64 w-full mb-8\" />\n              <div className=\"space-y-4\">\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </div>\n            </div>\n          </div>\n          <Footer />\n        </>\n      );\n    }\n\n    if (!currentPost) {\n      return (\n        <>\n          <Header />\n          <div className=\"min-h-screen bg-georgian-cream flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-serif font-bold georgian-wine mb-4\">Article Not Found</h1>\n              <p className=\"georgian-gray mb-6\">The article you're looking for doesn't exist.</p>\n              <Link href=\"/blog\">\n                <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\">\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Blog\n                </Button>\n              </Link>\n            </div>\n          </div>\n          <Footer />\n        </>\n      );\n    }\n\n    return (\n      <>\n        <Helmet>\n          <title>{getTitle(currentPost)} - Georgian Heritage Blog</title>\n          <meta name=\"description\" content={getExcerpt(currentPost)} />\n        </Helmet>\n\n        <Header />\n\n        <article className=\"py-16 bg-georgian-cream min-h-screen\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            {/* Breadcrumb */}\n            <div className=\"flex items-center space-x-2 text-sm mb-8\">\n              <Link href=\"/\" className=\"georgian-gray hover:georgian-wine transition-colors\">\n                Home\n              </Link>\n              <span className=\"georgian-gray\">/</span>\n              <Link href=\"/blog\" className=\"georgian-gray hover:georgian-wine transition-colors\">\n                Blog\n              </Link>\n              <span className=\"georgian-gray\">/</span>\n              <span className=\"georgian-wine font-medium\">{getTitle(currentPost)}</span>\n            </div>\n\n            {/* Article Header */}\n            <header className=\"text-center mb-12\">\n              <Badge className={getCategoryColor(currentPost.category)} variant=\"secondary\">\n                {currentPost.category}\n              </Badge>\n              <h1 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mt-4 mb-6\">\n                {getTitle(currentPost)}\n              </h1>\n              <div className=\"flex items-center justify-center space-x-6 text-sm georgian-gray\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"mr-2 h-4 w-4\" />\n                  {formatDate(currentPost.publishedAt)}\n                </div>\n                <div className=\"flex items-center\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Georgian Heritage Team\n                </div>\n              </div>\n            </header>\n\n            {/* Featured Image */}\n            <div className=\"mb-12\">\n              <img\n                src={currentPost.imageUrl}\n                alt={getTitle(currentPost)}\n                className=\"w-full h-96 object-cover rounded-xl shadow-lg\"\n              />\n            </div>\n\n            {/* Article Content */}\n            <div className=\"prose prose-lg max-w-none georgian-gray\">\n              <div className=\"bg-white rounded-xl p-8 shadow-lg\">\n                <p className=\"text-xl leading-relaxed mb-8 georgian-gray italic\">\n                  {getExcerpt(currentPost)}\n                </p>\n                <div className=\"whitespace-pre-wrap text-lg leading-relaxed\">\n                  {getContent(currentPost)}\n                </div>\n              </div>\n            </div>\n\n            {/* Related Articles */}\n            {relatedPosts.length > 0 && (\n              <section className=\"mt-16\">\n                <h2 className=\"text-3xl font-serif font-bold georgian-wine mb-8 text-center\">\n                  Related Articles\n                </h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                  {relatedPosts.map((post) => (\n                    <BlogCard key={post.id} post={post} />\n                  ))}\n                </div>\n              </section>\n            )}\n\n            {/* Back to Blog */}\n            <div className=\"text-center mt-12\">\n              <Link href=\"/blog\">\n                <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\">\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Blog\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </article>\n\n        <Footer />\n      </>\n    );\n  }\n\n  // Blog listing view\n  return (\n    <>\n      <Helmet>\n        <title>Blog - Georgian Heritage</title>\n        <meta name=\"description\" content=\"Explore stories, traditions, and insights about Georgian culture, heritage, and ethnographic regions.\" />\n      </Helmet>\n\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative h-64 bg-gradient-to-r from-georgian-wine to-georgian-terracotta\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-20\" />\n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl md:text-5xl font-serif font-bold mb-4\">\n              Stories & Traditions\n            </h1>\n            <p className=\"text-lg md:text-xl font-light\">\n              Discover the rich tapestry of Georgian culture and heritage\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Categories Filter */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            <Button variant=\"default\" className=\"bg-georgian-wine text-white\">\n              All Stories\n            </Button>\n            {categories.map(category => (\n              <Button\n                key={category}\n                variant=\"outline\"\n                className=\"georgian-wine hover:bg-georgian-wine hover:text-white\"\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Blog Posts Grid */}\n      <section className=\"py-16 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {postsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : blogPosts.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {blogPosts.map((post) => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-xl font-serif font-bold georgian-wine mb-4\">No Stories Found</h3>\n              <p className=\"georgian-gray\">\n                Check back soon for new stories and insights about Georgian culture.\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Newsletter CTA */}\n      <section className=\"py-16 bg-georgian-wine text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-serif font-bold mb-4\">\n            Stay Updated\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-8\">\n            Subscribe to our newsletter to receive the latest stories and cultural insights from Georgia.\n          </p>\n          <Button\n            className=\"bg-white text-georgian-wine hover:bg-gray-100 px-8 py-3 text-lg font-semibold\"\n            onClick={() => window.location.href = '/contact'}\n          >\n            Contact Us\n          </Button>\n        </div>\n      </section>\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":11278},"client/src/pages/Contact.tsx":{"content":"import { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport ContactForm from '@/components/ContactForm';\nimport { MapPin, Phone, Mail, Clock, Facebook, Instagram, Youtube } from 'lucide-react';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\n\nexport default function Contact() {\n  const { language } = useLanguage();\n\n  return (\n    <>\n      <Helmet>\n        <title>Contact - Georgian Heritage</title>\n        <meta name=\"description\" content=\"Get in touch with Georgian Heritage to plan your cultural adventure and learn more about authentic Georgian experiences.\" />\n      </Helmet>\n\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative h-64 bg-gradient-to-r from-georgian-wine to-georgian-terracotta\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-20\" />\n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl md:text-5xl font-serif font-bold mb-4\">\n              {getTranslation('nav.contact', language)}\n            </h1>\n            <p className=\"text-lg md:text-xl font-light\">\n              {language === 'ka' \n                ? '·Éì·Éê·Éí·Éï·Éò·Éô·Éê·Éï·É®·Éò·É†·Éì·Éò·Éó ·Éó·É•·Éï·Éî·Éú·Éò ·Éô·É£·Éö·É¢·É£·É†·É£·Éö·Éò ·Éó·Éê·Éï·Éí·Éê·Éì·Éê·É°·Éê·Éï·Éö·Éò·É° ·Éì·Éê·É°·Éê·Éí·Éî·Éí·Éõ·Éê·Éì' \n                : language === 'ru' \n                ? '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, —á—Ç–æ–±—ã —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ'\n                : 'Get in touch to plan your cultural adventure'\n              }\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-serif font-bold georgian-wine mb-4\">\n              Get in Touch\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-2xl mx-auto\">\n              We're here to help you discover the authentic beauty of Georgian culture and heritage.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n            {/* Address */}\n            <div className=\"text-center p-6 bg-georgian-cream rounded-xl\" data-testid=\"contact-address\">\n              <MapPin className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">Address</h3>\n              <p className=\"georgian-gray\" data-testid=\"address-details\">\n                Rustaveli Avenue 12<br />\n                Tbilisi 0108, Georgia\n              </p>\n            </div>\n\n            {/* Phone */}\n            <div className=\"text-center p-6 bg-georgian-cream rounded-xl\" data-testid=\"contact-phone\">\n              <Phone className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">Phone</h3>\n              <p className=\"georgian-gray\" data-testid=\"phone-numbers\">\n                +995 32 200 0000<br />\n                +995 599 123 456\n              </p>\n            </div>\n\n            {/* Email */}\n            <div className=\"text-center p-6 bg-georgian-cream rounded-xl\" data-testid=\"contact-email\">\n              <Mail className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">Email</h3>\n              <p className=\"georgian-gray\" data-testid=\"email-addresses\">\n                info@georgianheritage.com<br />\n                tours@georgianheritage.com\n              </p>\n            </div>\n\n            {/* Hours */}\n            <div className=\"text-center p-6 bg-georgian-cream rounded-xl\" data-testid=\"contact-hours\">\n              <Clock className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">Business Hours</h3>\n              <p className=\"georgian-gray text-sm\" data-testid=\"business-hours\">\n                Mon - Fri: 9:00 AM - 6:00 PM<br />\n                Sat: 10:00 AM - 4:00 PM<br />\n                Sun: Closed\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form Section */}\n      <section className=\"py-16 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-serif font-bold georgian-wine mb-4\">\n              Plan Your Journey\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-3xl mx-auto\">\n              Ready to experience authentic Georgian culture? Get in touch with our local experts to plan your perfect cultural adventure.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <ContactForm />\n\n            <div className=\"space-y-8\">\n              {/* Why Choose Us */}\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-6\">Why Choose Us?</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-georgian-wine rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Local Expertise</h4>\n                      <p className=\"text-sm georgian-gray\">Deep knowledge of Georgian culture and traditions from local experts.</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-georgian-wine rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Authentic Experiences</h4>\n                      <p className=\"text-sm georgian-gray\">Genuine cultural immersion with local families and artisans.</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-georgian-wine rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Personalized Service</h4>\n                      <p className=\"text-sm georgian-gray\">Customized tours and experiences tailored to your interests.</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-georgian-wine rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Quality Guarantee</h4>\n                      <p className=\"text-sm georgian-gray\">Commitment to excellence in every aspect of your journey.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Social Media */}\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-6\">Follow Our Journey</h3>\n                <p className=\"georgian-gray mb-6\">\n                  Stay connected with us on social media for the latest updates, stories, and behind-the-scenes content.\n                </p>\n                <div className=\"flex space-x-4\">\n                  <a\n                    href=\"#\"\n                    className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all flex items-center justify-center\"\n                    aria-label=\"Facebook\"\n                  >\n                    <Facebook className=\"h-5 w-5\" />\n                  </a>\n                  <a\n                    href=\"#\"\n                    className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all flex items-center justify-center\"\n                    aria-label=\"Instagram\"\n                  >\n                    <Instagram className=\"h-5 w-5\" />\n                  </a>\n                  <a\n                    href=\"#\"\n                    className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all flex items-center justify-center\"\n                    aria-label=\"YouTube\"\n                  >\n                    <Youtube className=\"h-5 w-5\" />\n                  </a>\n                </div>\n              </div>\n\n              {/* Map Placeholder */}\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-6\">Visit Our Office</h3>\n                <div className=\"bg-georgian-cream h-48 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center georgian-gray\">\n                    <MapPin className=\"h-12 w-12 mx-auto mb-2\" />\n                    <p>Interactive map will be available soon</p>\n                    <p className=\"text-sm\">Rustaveli Avenue 12, Tbilisi</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-serif font-bold georgian-wine mb-4\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl georgian-gray\">\n              Here are answers to some common questions about our tours and services.\n            </p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"bg-georgian-cream rounded-xl p-6\">\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">\n                How far in advance should I book my tour?\n              </h3>\n              <p className=\"georgian-gray\">\n                We recommend booking at least 2-3 weeks in advance, especially during peak season (May-October). However, we can often accommodate last-minute requests based on availability.\n              </p>\n            </div>\n\n            <div className=\"bg-georgian-cream rounded-xl p-6\">\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">\n                Do you provide transportation?\n              </h3>\n              <p className=\"georgian-gray\">\n                Yes, all our tours include comfortable transportation with experienced drivers. For custom tours, we can arrange various transportation options based on your preferences.\n              </p>\n            </div>\n\n            <div className=\"bg-georgian-cream rounded-xl p-6\">\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">\n                Are meals included in the tours?\n              </h3>\n              <p className=\"georgian-gray\">\n                Most of our tours include traditional Georgian meals. Specific inclusions are listed in each tour description. We can accommodate dietary restrictions with advance notice.\n              </p>\n            </div>\n\n            <div className=\"bg-georgian-cream rounded-xl p-6\">\n              <h3 className=\"text-lg font-serif font-bold georgian-wine mb-3\">\n                What languages do your guides speak?\n              </h3>\n              <p className=\"georgian-gray\">\n                Our guides are fluent in English, Georgian, and Russian. We can also arrange guides for other languages upon request.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":12037},"client/src/pages/Home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport HeroSection from '@/components/HeroSection';\nimport RegionCard from '@/components/RegionCard';\nimport TourCard from '@/components/TourCard';\nimport ProductCard from '@/components/ProductCard';\nimport BlogCard from '@/components/BlogCard';\nimport ContactForm from '@/components/ContactForm';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport { Link } from 'wouter';\nimport { ChevronsRight, ChevronLeft, ChevronRight } from 'lucide-react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { useCallback } from 'react';\nimport type { Region, Tour, Product, BlogPost } from '@shared/schema';\n\nexport default function Home() {\n  const { language } = useLanguage();\n\n  const { data: regions = [], isLoading: regionsLoading } = useQuery<Region[]>({\n    queryKey: ['/api/regions'],\n  });\n\n  const { data: tours = [], isLoading: toursLoading } = useQuery<Tour[]>({\n    queryKey: ['/api/tours'],\n  });\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: blogPosts = [], isLoading: blogLoading } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog'],\n  });\n\n  const latestBlogPosts = blogPosts.slice(0, 3);\n\n  // Carousel hooks with mobile performance optimizations\n  const [regionsEmblaRef, regionsEmblaApi] = useEmblaCarousel({ \n    loop: false, \n    align: 'start',\n    dragFree: true,\n    containScroll: 'trimSnaps',\n    inViewThreshold: 0.7\n  });\n  const [toursEmblaRef, toursEmblaApi] = useEmblaCarousel({ \n    loop: false, \n    align: 'start',\n    dragFree: true,\n    containScroll: 'trimSnaps',\n    inViewThreshold: 0.7\n  });\n  const [productsEmblaRef, productsEmblaApi] = useEmblaCarousel({ \n    loop: false, \n    align: 'start',\n    dragFree: true,\n    containScroll: 'trimSnaps',\n    inViewThreshold: 0.7\n  });\n\n  const scrollRegionsPrev = useCallback(() => {\n    if (regionsEmblaApi) regionsEmblaApi.scrollPrev();\n  }, [regionsEmblaApi]);\n\n  const scrollRegionsNext = useCallback(() => {\n    if (regionsEmblaApi) regionsEmblaApi.scrollNext();\n  }, [regionsEmblaApi]);\n\n  const scrollToursPrev = useCallback(() => {\n    if (toursEmblaApi) toursEmblaApi.scrollPrev();\n  }, [toursEmblaApi]);\n\n  const scrollToursNext = useCallback(() => {\n    if (toursEmblaApi) toursEmblaApi.scrollNext();\n  }, [toursEmblaApi]);\n\n  const scrollProductsPrev = useCallback(() => {\n    if (productsEmblaApi) productsEmblaApi.scrollPrev();\n  }, [productsEmblaApi]);\n\n  const scrollProductsNext = useCallback(() => {\n    if (productsEmblaApi) productsEmblaApi.scrollNext();\n  }, [productsEmblaApi]);\n\n  const galleryImages = [\n    \"https://images.unsplash.com/photo-1414235077428-338989a2e8c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\",\n    \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\",\n    \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\",\n    \"https://images.unsplash.com/photo-1469474968028-56623f02e42e?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Georgian Heritage - Discover Georgia's Ethnographic Regions</title>\n        <meta name=\"description\" content=\"Explore the authentic beauty and rich cultural heritage of Georgia's ethnographic regions through immersive experiences and traditional hospitality.\" />\n      </Helmet>\n\n      <Header />\n      <HeroSection />\n\n      {/* Regions Section */}\n      <section id=\"regions\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-16\">\n            <div>\n              <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n                Ethnographic Regions of Georgia\n              </h2>\n              <p className=\"text-xl georgian-gray max-w-3xl\">\n                From the wine valleys of Kakheti to the mountain peaks of Svaneti, each region tells its own unique story through centuries of tradition, culture, and heritage.\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={scrollRegionsPrev}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronLeft className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={scrollRegionsNext}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronRight className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {regionsLoading ? (\n            <div className=\"flex space-x-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"flex-none w-80 space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"relative\">\n              <div className=\"embla overflow-hidden\" ref={regionsEmblaRef} style={{ touchAction: 'pan-y' }}>\n                <div className=\"flex space-x-6 pb-4\" style={{ willChange: 'transform' }}>\n                  {regions.map((region) => (\n                    <div key={region.id} className=\"flex-none w-80\">\n                      <RegionCard region={region} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Photo Gallery Section */}\n      <section className=\"py-20 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n              Visual Journey Through Georgia\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-3xl mx-auto\">\n              Experience the breathtaking beauty and rich cultural heritage through our curated gallery of Georgian landscapes, architecture, and traditions.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-12\">\n            {galleryImages.map((image, index) => (\n              <div key={index} className=\"group relative overflow-hidden rounded-lg cursor-pointer\">\n                <img\n                  src={image}\n                  alt={`Georgian heritage ${index + 1}`}\n                  className=\"w-full h-64 object-cover transition-transform group-hover:scale-110\"\n                />\n                <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity\" />\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-center\">\n            <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-8 py-4 text-lg font-semibold mr-4\">\n              View Full Gallery\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"border-2 border-georgian-wine text-georgian-wine hover:bg-georgian-wine hover:text-white px-8 py-4 text-lg font-semibold\"\n            >\n              <ChevronsRight className=\"mr-2 h-5 w-5\" />\n              360¬∞ Virtual Tour\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Tours Section */}\n      <section id=\"tours\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-16\">\n            <div>\n              <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n                Authentic Georgian Experiences\n              </h2>\n              <p className=\"text-xl georgian-gray max-w-3xl\">\n                Join us for carefully crafted tours that immerse you in Georgia's rich cultural heritage, from wine tasting to traditional cooking classes.\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={scrollToursPrev}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronLeft className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={scrollToursNext}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronRight className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {toursLoading ? (\n            <div className=\"flex space-x-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"flex-none w-80 space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"relative\">\n              <div className=\"embla overflow-hidden\" ref={toursEmblaRef} style={{ touchAction: 'pan-y' }}>\n                <div className=\"flex space-x-6 pb-4\" style={{ willChange: 'transform' }}>\n                  {tours.map((tour) => (\n                    <div key={tour.id} className=\"flex-none w-80\">\n                      <TourCard tour={tour} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <p className=\"georgian-gray mb-4\">Looking for a custom experience?</p>\n            <Link href=\"/tours\">\n              <Button\n                variant=\"outline\"\n                className=\"border-2 border-georgian-wine text-georgian-wine hover:bg-georgian-wine hover:text-white px-8 py-3 font-semibold\"\n              >\n                View All Tours\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Store Section */}\n      <section id=\"store\" className=\"py-20 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-16\">\n            <div>\n              <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n                Authentic Georgian Products\n              </h2>\n              <p className=\"text-xl georgian-gray max-w-3xl\">\n                Take home the taste and craftsmanship of Georgia with our curated selection of wines, artisanal crafts, and traditional delicacies.\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={scrollProductsPrev}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronLeft className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={scrollProductsNext}\n                className=\"p-2 rounded-full bg-georgian-wine hover:bg-georgian-wine/90 text-white transition-colors\"\n              >\n                <ChevronRight className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          {productsLoading ? (\n            <div className=\"flex space-x-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"flex-none w-72 space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"relative\">\n              <div className=\"embla overflow-hidden\" ref={productsEmblaRef} style={{ touchAction: 'pan-y' }}>\n                <div className=\"flex space-x-6 pb-4\" style={{ willChange: 'transform' }}>\n                  {products.map((product) => (\n                    <div key={product.id} className=\"flex-none w-72\">\n                      <ProductCard product={product} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/store\">\n              <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-8 py-3 font-semibold\">\n                {getTranslation('common.viewAll', language)} Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Blog Section */}\n      <section id=\"blog\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n              Stories & Traditions\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-3xl mx-auto\">\n              Dive deep into the rich tapestry of Georgian culture through stories, traditions, and insights from local experts and community members.\n            </p>\n          </div>\n\n          {blogLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {latestBlogPosts.map((post) => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/blog\">\n              <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-8 py-3 font-semibold\">\n                View All Stories\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-serif font-bold georgian-wine mb-4\">\n              Plan Your Journey\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-3xl mx-auto\">\n              Ready to experience authentic Georgian culture? Get in touch with our local experts to plan your perfect cultural adventure.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <ContactForm />\n\n            <div className=\"space-y-8\">\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-6\">Get in Touch</h3>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-map-marker-alt georgian-terracotta text-xl mr-4 mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Address</h4>\n                      <p className=\"georgian-gray\">\n                        Rustaveli Avenue 12<br />\n                        Tbilisi 0108, Georgia\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-phone georgian-terracotta text-xl mr-4 mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Phone</h4>\n                      <p className=\"georgian-gray\">+995 32 200 0000</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-envelope georgian-terracotta text-xl mr-4 mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Email</h4>\n                      <p className=\"georgian-gray\">info@georgianheritage.com</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-clock georgian-terracotta text-xl mr-4 mt-1\"></i>\n                    <div>\n                      <h4 className=\"font-semibold georgian-wine mb-1\">Business Hours</h4>\n                      <p className=\"georgian-gray\">\n                        Monday - Friday: 9:00 AM - 6:00 PM<br />\n                        Saturday: 10:00 AM - 4:00 PM<br />\n                        Sunday: Closed\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h3 className=\"text-2xl font-serif font-bold georgian-wine mb-6\">Follow Our Journey</h3>\n                <div className=\"flex space-x-4\">\n                  <a href=\"#\" className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all\">\n                    <i className=\"fab fa-facebook-f text-lg\"></i>\n                  </a>\n                  <a href=\"#\" className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all\">\n                    <i className=\"fab fa-instagram text-lg\"></i>\n                  </a>\n                  <a href=\"#\" className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all\">\n                    <i className=\"fab fa-youtube text-lg\"></i>\n                  </a>\n                  <a href=\"#\" className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white p-3 rounded-lg transition-all\">\n                    <i className=\"fab fa-tripadvisor text-lg\"></i>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":18902},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Globe } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { login, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const onSubmit = async (data: LoginFormData) => {\n    try {\n      setError(\"\");\n      await login(data.username, data.password);\n      \n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n      \n      // Redirect to home page after successful login\n      setLocation(\"/\");\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Login failed\";\n      setError(errorMessage);\n      \n      toast({\n        title: \"Login failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-georgian-wine/5 to-georgian-gold/5 p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo/Brand */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-georgian-wine rounded-full flex items-center justify-center\">\n            <Globe className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-georgian-wine\">Georgian Heritage</h1>\n          <p className=\"text-sm text-georgian-gray\">Discover Georgia's Cultural Treasures</p>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle className=\"text-xl\">Welcome Back</CardTitle>\n            <CardDescription>\n              Sign in to access your account and continue exploring Georgian heritage\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert variant=\"destructive\" className=\"mb-4\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"text\"\n                          placeholder=\"Enter your username\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-georgian-wine hover:bg-georgian-wine/90 text-white\"\n                  disabled={form.formState.isSubmitting}\n                  data-testid=\"button-login\"\n                  size=\"lg\"\n                >\n                  {form.formState.isSubmitting ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-georgian-gray\">\n                Don't have an account?{\" \"}\n                <Link href=\"/register\" data-testid=\"link-register\">\n                  <span className=\"font-medium text-georgian-wine hover:text-georgian-wine/80 cursor-pointer\">\n                    Create one here\n                  </span>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5822},"client/src/pages/RegionDetail.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport TourCard from '@/components/TourCard';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { ArrowLeft, MapPin, Camera, Clock } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport type { Region, Tour } from '@shared/schema';\n\nexport default function RegionDetail() {\n  const { slug } = useParams<{ slug: string }>();\n  const { language } = useLanguage();\n\n  const { data: region, isLoading: regionLoading, error: regionError } = useQuery<Region>({\n    queryKey: [`/api/regions/slug/${slug}`],\n  });\n\n  const { data: tours = [], isLoading: toursLoading } = useQuery<Tour[]>({\n    queryKey: [`/api/tours?region=${region?.id}`],\n    enabled: !!region?.id,\n  });\n\n  const getName = () => {\n    if (!region) return '';\n    switch (language) {\n      case 'ka': return region.nameKa || region.name;\n      case 'ru': return region.nameRu || region.name;\n      default: return region.name;\n    }\n  };\n\n  const getDescription = () => {\n    if (!region) return '';\n    switch (language) {\n      case 'ka': return region.descriptionKa || region.description;\n      case 'ru': return region.descriptionRu || region.description;\n      default: return region.description;\n    }\n  };\n\n  if (regionLoading) {\n    return (\n      <>\n        <Header />\n        <div className=\"min-h-screen bg-georgian-cream\">\n          <div className=\"relative h-96\">\n            <Skeleton className=\"w-full h-full\" />\n          </div>\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n            <Skeleton className=\"h-8 w-64 mb-4\" />\n            <Skeleton className=\"h-4 w-full mb-2\" />\n            <Skeleton className=\"h-4 w-3/4 mb-8\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-96 w-full rounded-xl\" />\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n\n  if (regionError || !region) {\n    return (\n      <>\n        <Header />\n        <div className=\"min-h-screen bg-georgian-cream flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-serif font-bold georgian-wine mb-4\">Region Not Found</h1>\n            <p className=\"georgian-gray mb-6\">The region you're looking for doesn't exist.</p>\n            <Link href=\"/\">\n              <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{getName()} - Georgian Heritage</title>\n        <meta name=\"description\" content={getDescription()} />\n      </Helmet>\n\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative h-96 overflow-hidden\">\n        <img\n          src={region.imageUrl}\n          alt={getName()}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-40\" />\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl md:text-6xl font-serif font-bold mb-4\">\n              {getName()}\n            </h1>\n            <p className=\"text-xl md:text-2xl font-light\">\n              {region.mainAttraction}\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Breadcrumb */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Link href=\"/\" className=\"georgian-gray hover:georgian-wine transition-colors\">\n              Home\n            </Link>\n            <span className=\"georgian-gray\">/</span>\n            <Link href=\"/#regions\" className=\"georgian-gray hover:georgian-wine transition-colors\">\n              Regions\n            </Link>\n            <span className=\"georgian-gray\">/</span>\n            <span className=\"georgian-wine font-medium\">{getName()}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Region Details */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n            <div className=\"lg:col-span-2\">\n              <h2 className=\"text-3xl font-serif font-bold georgian-wine mb-6\">\n                About {getName()}\n              </h2>\n              <p className=\"text-lg georgian-gray leading-relaxed mb-8\">\n                {getDescription()}\n              </p>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n                <div className=\"text-center p-6 bg-georgian-cream rounded-xl\">\n                  <MapPin className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n                  <h3 className=\"font-semibold georgian-wine mb-2\">Location</h3>\n                  <p className=\"text-sm georgian-gray\">\n                    {language === 'ka' ? '·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù' : language === 'ru' ? '–ì—Ä—É–∑–∏—è' : 'Georgia'}\n                  </p>\n                </div>\n                <div className=\"text-center p-6 bg-georgian-cream rounded-xl\">\n                  <Camera className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n                  <h3 className=\"font-semibold georgian-wine mb-2\">Main Attraction</h3>\n                  <p className=\"text-sm georgian-gray\">{region.mainAttraction}</p>\n                </div>\n                <div className=\"text-center p-6 bg-georgian-cream rounded-xl\">\n                  <Clock className=\"h-12 w-12 georgian-wine mx-auto mb-4\" />\n                  <h3 className=\"font-semibold georgian-wine mb-2\">Best Time</h3>\n                  <p className=\"text-sm georgian-gray\">\n                    {language === 'ka' ? '·Éõ·Éó·Éî·Éö·Éò ·É¨·Éî·Éö·Éò' : language === 'ru' ? '–ö—Ä—É–≥–ª—ã–π –≥–æ–¥' : 'Year Round'}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"bg-georgian-cream rounded-xl p-6\">\n                <h3 className=\"text-xl font-serif font-bold georgian-wine mb-4\">\n                  Quick Facts\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"georgian-gray\">Region:</span>\n                    <span className=\"georgian-wine font-medium\">{getName()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"georgian-gray\">Tours Available:</span>\n                    <span className=\"georgian-wine font-medium\">{tours.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"georgian-gray\">Featured:</span>\n                    <span className=\"georgian-wine font-medium\">\n                      {region.featured ? 'Yes' : 'No'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-georgian-wine text-white rounded-xl p-6\">\n                <h3 className=\"text-xl font-serif font-bold mb-4\">\n                  Plan Your Visit\n                </h3>\n                <p className=\"text-gray-300 mb-4\">\n                  Ready to explore {getName()}? Contact us to plan your perfect cultural adventure.\n                </p>\n                <Link href=\"/contact\">\n                  <Button className=\"w-full bg-white text-georgian-wine hover:bg-gray-100\">\n                    Contact Us\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tours in this Region */}\n      <section className=\"py-16 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-serif font-bold georgian-wine mb-4\">\n              Tours in {getName()}\n            </h2>\n            <p className=\"text-xl georgian-gray max-w-2xl mx-auto\">\n              Discover authentic experiences and immerse yourself in the unique culture of this region.\n            </p>\n          </div>\n\n          {toursLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(3)].map((_, i) => (\n                <Skeleton key={i} className=\"h-96 w-full rounded-xl\" />\n              ))}\n            </div>\n          ) : tours.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {tours.map((tour) => (\n                <TourCard key={tour.id} tour={tour} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-xl georgian-gray mb-6\">\n                No tours are currently available for this region.\n              </p>\n              <Link href=\"/tours\">\n                <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\">\n                  Browse All Tours\n                </Button>\n              </Link>\n            </div>\n          )}\n\n          {tours.length > 0 && (\n            <div className=\"text-center mt-12\">\n              <Link href=\"/tours\">\n                <Button className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white px-8 py-3 font-semibold\">\n                  View All Tours\n                </Button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":10181},"client/src/pages/Regions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { getTranslation } from \"@/lib/i18n\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport RegionCard from \"@/components/RegionCard\";\nimport { Region } from \"@shared/schema\";\n\nexport default function Regions() {\n  const { language } = useLanguage();\n  const { data: regions, isLoading } = useQuery<Region[]>({\n    queryKey: [\"/api/regions\"],\n  });\n\n  const pageTitle = getTranslation(\"regions_title\", language);\n  const pageDescription = getTranslation(\"regions_description\", language);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600\"></div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 to-orange-100\">\n      <Helmet>\n        <title>{pageTitle} | Georgian Heritage</title>\n        <meta name=\"description\" content={pageDescription} />\n      </Helmet>\n      \n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-amber-900 mb-6 font-playfair\">\n            {getTranslation(\"regions_hero_title\", language)}\n          </h1>\n          <p className=\"text-xl text-amber-700 max-w-3xl mx-auto font-inter\">\n            {getTranslation(\"regions_hero_subtitle\", language)}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {regions?.map((region) => (\n            <RegionCard key={region.id} region={region} />\n          ))}\n        </div>\n\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-white/80 backdrop-blur-sm rounded-2xl p-8 max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-amber-900 mb-6 font-playfair\">\n              {getTranslation(\"regions_about_title\", language)}\n            </h2>\n            <p className=\"text-lg text-amber-700 leading-relaxed font-inter\">\n              {getTranslation(\"regions_about_content\", language)}\n            </p>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":2506},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Globe } from \"lucide-react\";\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const { register, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const onSubmit = async (data: RegisterFormData) => {\n    try {\n      setError(\"\");\n      await register({\n        username: data.username,\n        email: data.email,\n        password: data.password,\n        firstName: data.firstName || undefined,\n        lastName: data.lastName || undefined,\n      });\n      \n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to Georgian Heritage!\",\n      });\n      \n      // Redirect to home page after successful registration\n      setLocation(\"/\");\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Registration failed\";\n      setError(errorMessage);\n      \n      toast({\n        title: \"Registration failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-georgian-wine/5 to-georgian-gold/5 p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo/Brand */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-georgian-wine rounded-full flex items-center justify-center\">\n            <Globe className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-georgian-wine\">Georgian Heritage</h1>\n          <p className=\"text-sm text-georgian-gray\">Join Our Cultural Journey</p>\n        </div>\n\n        {/* Registration Card */}\n        <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle className=\"text-xl\">Create Your Account</CardTitle>\n            <CardDescription>\n              Start your journey through Georgia's rich cultural heritage\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert variant=\"destructive\" className=\"mb-4\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"First name\"\n                            disabled={form.formState.isSubmitting}\n                            data-testid=\"input-firstName\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Last name\"\n                            disabled={form.formState.isSubmitting}\n                            data-testid=\"input-lastName\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Choose a username\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Create a password\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Confirm your password\"\n                          disabled={form.formState.isSubmitting}\n                          data-testid=\"input-confirmPassword\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-georgian-wine hover:bg-georgian-wine/90 text-white\"\n                  disabled={form.formState.isSubmitting}\n                  data-testid=\"button-register\"\n                  size=\"lg\"\n                >\n                  {form.formState.isSubmitting ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-georgian-gray\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\" data-testid=\"link-login\">\n                  <span className=\"font-medium text-georgian-wine hover:text-georgian-wine/80 cursor-pointer\">\n                    Sign in here\n                  </span>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9423},"client/src/pages/Store.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport ProductCard from '@/components/ProductCard';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, ShoppingCart, Plus, Minus, X } from 'lucide-react';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { getTranslation } from '@/lib/i18n';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Product } from '@shared/schema';\n\nexport default function Store() {\n  const { language } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [cartOpen, setCartOpen] = useState(false);\n\n  // Generate session ID for cart\n  useEffect(() => {\n    if (!localStorage.getItem('sessionId')) {\n      localStorage.setItem('sessionId', Math.random().toString(36).substr(2, 9));\n    }\n  }, []);\n\n  const { data: allProducts = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: cartItems = [], isLoading: cartLoading } = useQuery({\n    queryKey: ['/api/cart'],\n    refetchInterval: 1000,\n  });\n\n  // Filter products\n  const filteredProducts = allProducts.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = [\n    { value: 'all', label: 'All Products' },\n    { value: 'wine', label: 'Wine & Spirits' },\n    { value: 'food', label: 'Traditional Food' },\n    { value: 'crafts', label: 'Handicrafts' },\n    { value: 'souvenirs', label: 'Souvenirs' }\n  ];\n\n  const updateCartMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: number; quantity: number }) => {\n      return apiRequest('PUT', `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest('DELETE', `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Removed from Cart\",\n        description: \"Item has been removed from your cart.\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('DELETE', '/api/cart');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n      toast({\n        title: \"Cart Cleared\",\n        description: \"All items have been removed from your cart.\",\n      });\n    },\n  });\n\n  const cartTotal = cartItems.reduce((sum: number, item: any) => {\n    return sum + (parseFloat(item.product?.price || 0) * item.quantity);\n  }, 0);\n\n  const cartCount = cartItems.reduce((sum: number, item: any) => sum + item.quantity, 0);\n\n  const handleUpdateQuantity = (id: number, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateCartMutation.mutate({ id, quantity: newQuantity });\n  };\n\n  const handleCheckout = () => {\n    // TODO: Implement checkout process\n    toast({\n      title: \"Checkout Coming Soon\",\n      description: \"Checkout functionality will be implemented soon.\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Store - Georgian Heritage</title>\n        <meta name=\"description\" content=\"Shop authentic Georgian products including wines, traditional foods, handicrafts, and souvenirs.\" />\n      </Helmet>\n\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative h-64 bg-gradient-to-r from-georgian-wine to-georgian-terracotta\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-20\" />\n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl md:text-5xl font-serif font-bold mb-4\">\n              Authentic Georgian Products\n            </h1>\n            <p className=\"text-lg md:text-xl font-light\">\n              Take home the taste and craftsmanship of Georgia\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Filters Section */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map(category => (\n                <Button\n                  key={category.value}\n                  variant={selectedCategory === category.value ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedCategory(category.value)}\n                  className={selectedCategory === category.value \n                    ? \"bg-georgian-wine text-white\" \n                    : \"georgian-wine hover:bg-georgian-wine hover:text-white\"\n                  }\n                >\n                  {category.label}\n                </Button>\n              ))}\n            </div>\n\n            <Button\n              onClick={() => setCartOpen(true)}\n              className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white relative\"\n            >\n              <ShoppingCart className=\"mr-2 h-5 w-5\" />\n              Cart ({cartCount})\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Products Grid */}\n      <section className=\"py-16 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl font-serif font-bold georgian-wine\">\n              {filteredProducts.length} {filteredProducts.length === 1 ? 'Product' : 'Products'} Found\n            </h2>\n          </div>\n\n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : filteredProducts.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"max-w-md mx-auto\">\n                <h3 className=\"text-xl font-serif font-bold georgian-wine mb-4\">No Products Found</h3>\n                <p className=\"georgian-gray mb-6\">\n                  We couldn't find any products matching your criteria. Try adjusting your search or category filter.\n                </p>\n                <Button\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('all');\n                  }}\n                  className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Cart Sidebar */}\n      {cartOpen && (\n        <div className=\"fixed inset-0 z-50 overflow-hidden\">\n          <div className=\"absolute inset-0 bg-black bg-opacity-50\" onClick={() => setCartOpen(false)} />\n          <div className=\"absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl\">\n            <div className=\"flex flex-col h-full\">\n              <div className=\"flex items-center justify-between p-6 border-b\">\n                <h2 className=\"text-xl font-serif font-bold georgian-wine\">Shopping Cart</h2>\n                <Button variant=\"ghost\" onClick={() => setCartOpen(false)}>\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </div>\n\n              <div className=\"flex-1 overflow-y-auto p-6\">\n                {cartLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <Skeleton key={i} className=\"h-20 w-full\" />\n                    ))}\n                  </div>\n                ) : cartItems.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {cartItems.map((item: any) => (\n                      <Card key={item.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center space-x-4\">\n                            <img\n                              src={item.product?.imageUrl}\n                              alt={item.product?.name}\n                              className=\"w-16 h-16 object-cover rounded\"\n                            />\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-medium georgian-wine text-sm\">\n                                {item.product?.name}\n                              </h3>\n                              <p className=\"text-sm georgian-gray\">\n                                ${item.product?.price}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center justify-between mt-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}\n                                disabled={item.quantity <= 1}\n                              >\n                                <Minus className=\"h-3 w-3\" />\n                              </Button>\n                              <span className=\"w-8 text-center\">{item.quantity}</span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}\n                              >\n                                <Plus className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => removeFromCartMutation.mutate(item.id)}\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <ShoppingCart className=\"h-12 w-12 georgian-gray mx-auto mb-4\" />\n                    <p className=\"georgian-gray\">Your cart is empty</p>\n                  </div>\n                )}\n              </div>\n\n              {cartItems.length > 0 && (\n                <div className=\"border-t p-6\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <span className=\"text-lg font-semibold georgian-wine\">Total:</span>\n                    <span className=\"text-xl font-bold georgian-wine\">\n                      ${cartTotal.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Button\n                      onClick={handleCheckout}\n                      className=\"w-full bg-georgian-wine hover:bg-georgian-wine/90 text-white\"\n                    >\n                      Checkout\n                    </Button>\n                    <Button\n                      onClick={() => clearCartMutation.mutate()}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      Clear Cart\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":13620},"client/src/pages/Tours.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Helmet } from 'react-helmet-async';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport TourCard from '@/components/TourCard';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search, Filter } from 'lucide-react';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport type { Tour, Region } from '@shared/schema';\n\nexport default function Tours() {\n  const { language } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedRegion, setSelectedRegion] = useState('all');\n\n  const { data: allTours = [], isLoading: toursLoading } = useQuery<Tour[]>({\n    queryKey: ['/api/tours'],\n  });\n\n  const { data: regions = [] } = useQuery<Region[]>({\n    queryKey: ['/api/regions'],\n  });\n\n  // Filter tours based on search and filters\n  const filteredTours = allTours.filter(tour => {\n    const matchesSearch = tour.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         tour.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || tour.category === selectedCategory;\n    const matchesRegion = selectedRegion === 'all' || tour.regionId?.toString() === selectedRegion;\n    \n    return matchesSearch && matchesCategory && matchesRegion;\n  });\n\n  const categories = [\n    { value: 'all', label: 'All Categories' },\n    { value: 'wine', label: 'Wine Experience' },\n    { value: 'culinary', label: 'Culinary' },\n    { value: 'cultural', label: 'Cultural' },\n    { value: 'adventure', label: 'Adventure' }\n  ];\n\n  const getRegionName = (region: Region) => {\n    switch (language) {\n      case 'ka': return region.nameKa || region.name;\n      case 'ru': return region.nameRu || region.name;\n      default: return region.name;\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Tours - Georgian Heritage</title>\n        <meta name=\"description\" content=\"Explore authentic Georgian tours and experiences. From wine tasting to culinary classes and cultural heritage tours.\" />\n      </Helmet>\n\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"relative h-64 bg-gradient-to-r from-georgian-wine to-georgian-terracotta\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-20\" />\n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl md:text-5xl font-serif font-bold mb-4\">\n              {language === 'ka' ? '·É¢·É£·É†·Éî·Éë·Éò' : language === 'ru' ? '–¢—É—Ä—ã' : 'Tours & Experiences'}\n            </h1>\n            <p className=\"text-lg md:text-xl font-light\">\n              {language === 'ka' \n                ? '·Éê·É¶·Éõ·Éù·Éê·É©·Éò·Éú·Éî·Éó ·Éê·Éï·Éó·Éî·Éú·É¢·É£·É†·Éò ·É•·Éê·É†·Éó·É£·Éö·Éò ·Éí·Éê·Éõ·Éù·É™·Éì·Éò·Éö·Éî·Éë·Éî·Éë·Éò' \n                : language === 'ru' \n                ? '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–µ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è'\n                : 'Discover Authentic Georgian Experiences'\n              }\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Filters Section */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                placeholder=\"Search tours...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <div className=\"flex gap-4\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-48\">\n                  <Filter className=\"mr-2 h-4 w-4\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map(category => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedRegion} onValueChange={setSelectedRegion}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Regions\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Regions</SelectItem>\n                  {regions.map(region => (\n                    <SelectItem key={region.id} value={region.id.toString()}>\n                      {getRegionName(region)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 mt-4\">\n            {selectedCategory !== 'all' && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedCategory('all')}\n                className=\"georgian-wine\"\n              >\n                {categories.find(c => c.value === selectedCategory)?.label} √ó\n              </Button>\n            )}\n            {selectedRegion !== 'all' && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedRegion('all')}\n                className=\"georgian-wine\"\n              >\n                {getRegionName(regions.find(r => r.id.toString() === selectedRegion)!)} √ó\n              </Button>\n            )}\n            {searchQuery && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSearchQuery('')}\n                className=\"georgian-wine\"\n              >\n                \"{searchQuery}\" √ó\n              </Button>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Tours Grid */}\n      <section className=\"py-16 bg-georgian-cream\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl font-serif font-bold georgian-wine\">\n              {filteredTours.length} {filteredTours.length === 1 ? 'Tour' : 'Tours'} Found\n            </h2>\n          </div>\n\n          {toursLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-48 w-full rounded-xl\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                </div>\n              ))}\n            </div>\n          ) : filteredTours.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredTours.map((tour) => (\n                <TourCard key={tour.id} tour={tour} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"max-w-md mx-auto\">\n                <h3 className=\"text-xl font-serif font-bold georgian-wine mb-4\">No Tours Found</h3>\n                <p className=\"georgian-gray mb-6\">\n                  We couldn't find any tours matching your criteria. Try adjusting your filters or search terms.\n                </p>\n                <Button\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('all');\n                    setSelectedRegion('all');\n                  }}\n                  className=\"bg-georgian-wine hover:bg-georgian-wine/90 text-white\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Custom Tour CTA */}\n      <section className=\"py-16 bg-georgian-wine text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-serif font-bold mb-4\">\n            Looking for Something Unique?\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-8\">\n            We can create a custom tour experience tailored to your interests and preferences.\n          </p>\n          <Button\n            className=\"bg-white text-georgian-wine hover:bg-gray-100 px-8 py-3 text-lg font-semibold\"\n            onClick={() => window.location.href = '/contact'}\n          >\n            Plan Custom Tour\n          </Button>\n        </div>\n      </section>\n\n      <Footer />\n    </>\n  );\n}\n","size_bytes":9249},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/FlagLanguageSelector.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useLanguage } from '@/hooks/useLanguage';\nimport { Language } from '@/lib/i18n';\nimport usFlag from '@assets/united-states_1759006812751.png';\nimport georgiaFlag from '@assets/georgia_1759006812752.png';\nimport russiaFlag from '@assets/russia_1759006812752.png';\n\ninterface FlagLanguageSelectorProps {\n  className?: string;\n  triggerClassName?: string;\n}\n\nconst flagImages = {\n  en: usFlag,\n  ka: georgiaFlag,\n  ru: russiaFlag\n};\n\nconst FlagIcon = ({ country }: { country: string }) => {\n  return (\n    <img \n      src={flagImages[country as keyof typeof flagImages]} \n      alt={`${country} flag`}\n      className=\"w-6 h-4 rounded-sm object-cover\"\n    />\n  );\n};\n\n\nexport default function FlagLanguageSelector({ className, triggerClassName }: FlagLanguageSelectorProps) {\n  const { language, setLanguage } = useLanguage();\n\n  return (\n    <Select value={language} onValueChange={(value: Language) => setLanguage(value)}>\n      <SelectTrigger className={triggerClassName} data-testid=\"language-selector-trigger\">\n        <FlagIcon country={language} />\n      </SelectTrigger>\n      <SelectContent className={className}>\n        <SelectItem value=\"en\" data-testid=\"language-option-en\">\n          <FlagIcon country=\"en\" />\n        </SelectItem>\n        <SelectItem value=\"ka\" data-testid=\"language-option-ka\">\n          <FlagIcon country=\"ka\" />\n        </SelectItem>\n        <SelectItem value=\"ru\" data-testid=\"language-option-ru\">\n          <FlagIcon country=\"ru\" />\n        </SelectItem>\n      </SelectContent>\n    </Select>\n  );\n}","size_bytes":1645},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\n// Simplified User type for now\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  role: string;\n  isActive: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n}\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check if user is authenticated on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await fetch(\"/api/user\");\n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.log(\"Not authenticated\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    const response = await fetch(\"/api/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, password }),\n      credentials: \"include\",\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Invalid credentials\");\n    }\n\n    const userData = await response.json();\n    setUser(userData);\n  };\n\n  const register = async (userData: RegisterData) => {\n    const response = await fetch(\"/api/register\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(userData),\n      credentials: \"include\",\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Registration failed\");\n    }\n\n    const user = await response.json();\n    setUser(user);\n  };\n\n  const logout = async () => {\n    await fetch(\"/api/logout\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin: user?.role === \"admin\",\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":2842},"client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Users, UserCheck, UserX, Crown, Map, Plane, Store, Edit, Trash2 } from \"lucide-react\";\nimport RegionEditForm from \"@/components/RegionEditForm\";\nimport { UserEditForm } from \"@/components/UserEditForm\";\nimport { TourEditForm } from \"@/components/TourEditForm\";\nimport { ProductEditForm } from \"@/components/ProductEditForm\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Region {\n  id: number;\n  name: string;\n  nameKa: string;\n  nameRu: string;\n  description: string;\n  descriptionKa: string;\n  descriptionRu: string;\n  slug: string;\n  featured: boolean;\n  imageUrl: string;\n}\n\ninterface Tour {\n  id: number;\n  title: string;\n  titleKa: string;\n  titleRu: string;\n  description: string;\n  descriptionKa: string;\n  descriptionRu: string;\n  price: number;\n  duration: string;\n  regionId: number;\n  category: string;\n  featured: boolean;\n  imageUrl: string;\n}\n\ninterface Product {\n  id: number;\n  name: string;\n  nameKa: string;\n  nameRu: string;\n  description: string;\n  descriptionKa: string;\n  descriptionRu: string;\n  price: number;\n  category: string;\n  featured: boolean;\n  imageUrl: string;\n  inStock: boolean;\n}\n\nexport default function Admin() {\n  const { user, isAdmin, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"users\");\n  const { toast } = useToast();\n\n  // State for different data types\n  const [users, setUsers] = useState<User[]>([]);\n  const [regions, setRegions] = useState<Region[]>([]);\n  const [tours, setTours] = useState<Tour[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n\n  // Loading states\n  const [usersLoading, setUsersLoading] = useState(true);\n  const [regionsLoading, setRegionsLoading] = useState(false);\n  const [toursLoading, setToursLoading] = useState(false);\n  const [productsLoading, setProductsLoading] = useState(false);\n\n  // Error states\n  const [error, setError] = useState(\"\");\n\n  // Edit states\n  const [editingRegion, setEditingRegion] = useState<Region | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  \n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [isUserEditModalOpen, setIsUserEditModalOpen] = useState(false);\n  \n  const [editingTour, setEditingTour] = useState<Tour | null>(null);\n  const [isTourEditModalOpen, setIsTourEditModalOpen] = useState(false);\n  \n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [isProductEditModalOpen, setIsProductEditModalOpen] = useState(false);\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n    \n    if (!isAdmin) {\n      setLocation(\"/\");\n      return;\n    }\n  }, [isAuthenticated, isAdmin, setLocation]);\n\n  // Fetch users\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch(\"/api/admin/users\", {\n          credentials: \"include\",\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch users\");\n        }\n\n        const usersData = await response.json();\n        setUsers(usersData);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : \"Failed to fetch users\";\n        setError(errorMessage);\n        toast({\n          title: \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      } finally {\n        setUsersLoading(false);\n      }\n    };\n\n    if (isAuthenticated && isAdmin) {\n      fetchUsers();\n    }\n  }, [isAuthenticated, isAdmin, toast]);\n\n  // Fetch regions\n  const fetchRegions = async () => {\n    if (!regionsLoading) {\n      setRegionsLoading(true);\n      try {\n        const response = await fetch(\"/api/regions\");\n        if (!response.ok) throw new Error(\"Failed to fetch regions\");\n        const data = await response.json();\n        setRegions(data);\n      } catch (err) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch regions\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setRegionsLoading(false);\n      }\n    }\n  };\n\n  // Fetch tours\n  const fetchTours = async () => {\n    if (!toursLoading) {\n      setToursLoading(true);\n      try {\n        const response = await fetch(\"/api/tours\");\n        if (!response.ok) throw new Error(\"Failed to fetch tours\");\n        const data = await response.json();\n        setTours(data);\n      } catch (err) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch tours\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setToursLoading(false);\n      }\n    }\n  };\n\n  // Fetch products\n  const fetchProducts = async () => {\n    if (!productsLoading) {\n      setProductsLoading(true);\n      try {\n        const response = await fetch(\"/api/products\");\n        if (!response.ok) throw new Error(\"Failed to fetch products\");\n        const data = await response.json();\n        setProducts(data);\n      } catch (err) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch products\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setProductsLoading(false);\n      }\n    }\n  };\n\n  // Handle tab change and fetch data when needed\n  const handleTabChange = (value: string) => {\n    setActiveTab(value);\n    if (value === \"regions\" && regions.length === 0) {\n      fetchRegions();\n    } else if (value === \"tours\" && tours.length === 0) {\n      fetchTours();\n    } else if (value === \"products\" && products.length === 0) {\n      fetchProducts();\n    }\n  };\n\n  // User management functions\n  const updateUserRole = async (userId: string, role: string) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ role }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update user role\");\n      }\n\n      const updatedUser = await response.json();\n      setUsers(users.map(u => u.id === userId ? updatedUser : u));\n      \n      toast({\n        title: \"Success\",\n        description: `User role updated to ${role}`,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update role\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const updateUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ isActive }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update user status\");\n      }\n\n      const updatedUser = await response.json();\n      setUsers(users.map(u => u.id === userId ? updatedUser : u));\n      \n      toast({\n        title: \"Success\",\n        description: `User ${isActive ? 'activated' : 'deactivated'}`,\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update status\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Region editing functions\n  const handleEditRegion = (region: Region) => {\n    setEditingRegion(region);\n    setIsEditModalOpen(true);\n  };\n\n  const handleSaveRegion = async (regionId: number, data: any) => {\n    try {\n      const response = await fetch(`/api/admin/regions/${regionId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update region\");\n      }\n\n      const updatedRegion = await response.json();\n      setRegions(regions.map(r => r.id === regionId ? updatedRegion : r));\n      \n      toast({\n        title: \"Success\",\n        description: \"Region updated successfully\",\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update region\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      throw err;\n    }\n  };\n\n  const closeEditModal = () => {\n    setIsEditModalOpen(false);\n    setEditingRegion(null);\n  };\n\n  // User editing functions\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setIsUserEditModalOpen(true);\n  };\n\n  const handleSaveUser = async (userId: string, data: any) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n\n      const updatedUser = await response.json();\n      setUsers(users.map(u => u.id === userId ? updatedUser : u));\n      \n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update user\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      throw err;\n    }\n  };\n\n  const closeUserEditModal = () => {\n    setIsUserEditModalOpen(false);\n    setEditingUser(null);\n  };\n\n  // Tour editing functions\n  const handleEditTour = (tour: Tour) => {\n    setEditingTour(tour);\n    setIsTourEditModalOpen(true);\n  };\n\n  const handleSaveTour = async (tourId: number, data: any) => {\n    try {\n      const response = await fetch(`/api/admin/tours/${tourId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update tour\");\n      }\n\n      const updatedTour = await response.json();\n      setTours(tours.map(t => t.id === tourId ? updatedTour : t));\n      \n      toast({\n        title: \"Success\",\n        description: \"Tour updated successfully\",\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update tour\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      throw err;\n    }\n  };\n\n  const closeTourEditModal = () => {\n    setIsTourEditModalOpen(false);\n    setEditingTour(null);\n  };\n\n  // Product editing functions\n  const handleEditProduct = (product: Product) => {\n    setEditingProduct(product);\n    setIsProductEditModalOpen(true);\n  };\n\n  const handleSaveProduct = async (productId: number, data: any) => {\n    try {\n      const response = await fetch(`/api/admin/products/${productId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update product\");\n      }\n\n      const updatedProduct = await response.json();\n      setProducts(products.map(p => p.id === productId ? updatedProduct : p));\n      \n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update product\";\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      throw err;\n    }\n  };\n\n  const closeProductEditModal = () => {\n    setIsProductEditModalOpen(false);\n    setEditingProduct(null);\n  };\n\n  if (!isAuthenticated || !isAdmin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Shield className=\"mr-3 h-8 w-8 text-georgian-wine\" />\n            Admin Panel\n          </h1>\n          <p className=\"mt-2 text-gray-600\">Manage your Georgian Heritage website</p>\n        </div>\n\n        {error && (\n          <Alert className=\"mb-6 border-red-200 bg-red-50\">\n            <AlertDescription className=\"text-red-700\">{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs value={activeTab} onValueChange={handleTabChange} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"users\" className=\"flex items-center\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"regions\" className=\"flex items-center\">\n              <Map className=\"mr-2 h-4 w-4\" />\n              Regions\n            </TabsTrigger>\n            <TabsTrigger value=\"tours\" className=\"flex items-center\">\n              <Plane className=\"mr-2 h-4 w-4\" />\n              Tours\n            </TabsTrigger>\n            <TabsTrigger value=\"products\" className=\"flex items-center\">\n              <Store className=\"mr-2 h-4 w-4\" />\n              Store\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  User Management\n                </CardTitle>\n                <CardDescription>\n                  Manage user accounts, roles, and permissions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {usersLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"text-gray-500\">Loading users...</div>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>User</TableHead>\n                          <TableHead>Username</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Role</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Joined</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {users.map((userData) => (\n                          <TableRow key={userData.id}>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"h-8 w-8 bg-georgian-wine rounded-full flex items-center justify-center\">\n                                  <span className=\"text-white text-sm font-medium\">\n                                    {userData.firstName?.charAt(0) || userData.username.charAt(0).toUpperCase()}\n                                  </span>\n                                </div>\n                                <div>\n                                  <div className=\"font-medium\">\n                                    {userData.firstName || userData.lastName\n                                      ? `${userData.firstName || ''} ${userData.lastName || ''}`.trim()\n                                      : userData.username}\n                                  </div>\n                                  {userData.role === 'admin' && (\n                                    <Crown className=\"inline h-3 w-3 text-yellow-500\" />\n                                  )}\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"font-mono text-sm\">{userData.username}</TableCell>\n                            <TableCell>{userData.email}</TableCell>\n                            <TableCell>\n                              <Select\n                                value={userData.role}\n                                onValueChange={(role) => updateUserRole(userData.id, role)}\n                              >\n                                <SelectTrigger className=\"w-24\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"user\">User</SelectItem>\n                                  <SelectItem value=\"admin\">Admin</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                  checked={userData.isActive}\n                                  onCheckedChange={(checked) => updateUserStatus(userData.id, checked)}\n                                />\n                                <Badge variant={userData.isActive ? \"default\" : \"secondary\"}>\n                                  {userData.isActive ? (\n                                    <>\n                                      <UserCheck className=\"mr-1 h-3 w-3\" />\n                                      Active\n                                    </>\n                                  ) : (\n                                    <>\n                                      <UserX className=\"mr-1 h-3 w-3\" />\n                                      Inactive\n                                    </>\n                                  )}\n                                </Badge>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-sm text-gray-500\">\n                              {new Date(userData.createdAt).toLocaleDateString()}\n                            </TableCell>\n                            <TableCell>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleEditUser(userData)}\n                                data-testid={`edit-user-${userData.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Regions Tab */}\n          <TabsContent value=\"regions\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Map className=\"mr-2 h-5 w-5\" />\n                  Regions Management\n                </CardTitle>\n                <CardDescription>\n                  Manage Georgian ethnographic regions\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {regionsLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"text-gray-500\">Loading regions...</div>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Image</TableHead>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Georgian Name</TableHead>\n                          <TableHead>Russian Name</TableHead>\n                          <TableHead>Slug</TableHead>\n                          <TableHead>Featured</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {regions.map((region) => (\n                          <TableRow key={region.id}>\n                            <TableCell>\n                              <img \n                                src={region.imageUrl} \n                                alt={region.name}\n                                className=\"h-12 w-12 object-cover rounded\"\n                              />\n                            </TableCell>\n                            <TableCell className=\"font-medium\">{region.name}</TableCell>\n                            <TableCell>{region.nameKa}</TableCell>\n                            <TableCell>{region.nameRu}</TableCell>\n                            <TableCell className=\"font-mono text-sm\">{region.slug}</TableCell>\n                            <TableCell>\n                              <Badge variant={region.featured ? \"default\" : \"secondary\"}>\n                                {region.featured ? \"Featured\" : \"Standard\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditRegion(region)}\n                                  data-testid={`edit-region-${region.id}`}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tours Tab */}\n          <TabsContent value=\"tours\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Plane className=\"mr-2 h-5 w-5\" />\n                  Tours Management\n                </CardTitle>\n                <CardDescription>\n                  Manage tour packages and experiences\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {toursLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"text-gray-500\">Loading tours...</div>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Image</TableHead>\n                          <TableHead>Title</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Duration</TableHead>\n                          <TableHead>Price</TableHead>\n                          <TableHead>Region</TableHead>\n                          <TableHead>Featured</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {tours.map((tour) => (\n                          <TableRow key={tour.id}>\n                            <TableCell>\n                              <img \n                                src={tour.imageUrl} \n                                alt={tour.title}\n                                className=\"h-12 w-12 object-cover rounded\"\n                              />\n                            </TableCell>\n                            <TableCell className=\"font-medium\">{tour.title}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{tour.category}</Badge>\n                            </TableCell>\n                            <TableCell>{tour.duration}</TableCell>\n                            <TableCell className=\"font-medium\">${tour.price}</TableCell>\n                            <TableCell>{regions.find(r => r.id === tour.regionId)?.name || 'Unknown'}</TableCell>\n                            <TableCell>\n                              <Badge variant={tour.featured ? \"default\" : \"secondary\"}>\n                                {tour.featured ? \"Featured\" : \"Standard\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditTour(tour)}\n                                  data-testid={`edit-tour-${tour.id}`}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Products Tab */}\n          <TabsContent value=\"products\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Store className=\"mr-2 h-5 w-5\" />\n                  Store Management\n                </CardTitle>\n                <CardDescription>\n                  Manage products and inventory\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {productsLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"text-gray-500\">Loading products...</div>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Image</TableHead>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Price</TableHead>\n                          <TableHead>Stock</TableHead>\n                          <TableHead>Featured</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {products.map((product) => (\n                          <TableRow key={product.id}>\n                            <TableCell>\n                              <img \n                                src={product.imageUrl} \n                                alt={product.name}\n                                className=\"h-12 w-12 object-cover rounded\"\n                              />\n                            </TableCell>\n                            <TableCell className=\"font-medium\">{product.name}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{product.category}</Badge>\n                            </TableCell>\n                            <TableCell className=\"font-medium\">${product.price}</TableCell>\n                            <TableCell>\n                              <Badge variant={product.inStock ? \"default\" : \"destructive\"}>\n                                {product.inStock ? \"In Stock\" : \"Out of Stock\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={product.featured ? \"default\" : \"secondary\"}>\n                                {product.featured ? \"Featured\" : \"Standard\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => handleEditProduct(product)}\n                                  data-testid={`edit-product-${product.id}`}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Region Edit Modal */}\n        <RegionEditForm\n          region={editingRegion}\n          isOpen={isEditModalOpen}\n          onClose={closeEditModal}\n          onSave={handleSaveRegion}\n        />\n\n        {/* User Edit Modal */}\n        <UserEditForm\n          user={editingUser}\n          isOpen={isUserEditModalOpen}\n          onClose={closeUserEditModal}\n          onSave={handleSaveUser}\n        />\n\n        {/* Tour Edit Modal */}\n        <TourEditForm\n          tour={editingTour}\n          regions={regions}\n          isOpen={isTourEditModalOpen}\n          onClose={closeTourEditModal}\n          onSave={handleSaveTour}\n        />\n\n        {/* Product Edit Modal */}\n        <ProductEditForm\n          product={editingProduct}\n          isOpen={isProductEditModalOpen}\n          onClose={closeProductEditModal}\n          onSave={handleSaveProduct}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":31707},"server/auth.ts":{"content":"// Based on blueprint:javascript_auth_all_persistance authentication setup\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nasync function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\nasync function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  return await bcrypt.compare(supplied, stored);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'fallback-secret-key-for-development',\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !user.passwordHash || !user.isActive) {\n          return done(null, false);\n        }\n        \n        const isValid = await comparePasswords(password, user.passwordHash);\n        if (!isValid) {\n          return done(null, false);\n        }\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration route\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n      \n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await hashPassword(password);\n      \n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        role: 'user'\n      });\n\n      // Auto-login after registration\n      req.login(user, (err) => {\n        if (err) return next(err);\n        // Don't send password hash to client\n        const { passwordHash, ...userResponse } = user;\n        res.status(201).json(userResponse);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    if (req.user) {\n      // Don't send password hash to client\n      const { passwordHash, ...userResponse } = req.user;\n      res.status(200).json(userResponse);\n    } else {\n      res.status(401).json({ message: \"Invalid credentials\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n    \n    if (req.user) {\n      // Don't send password hash to client\n      const { passwordHash, ...userResponse } = req.user;\n      res.json(userResponse);\n    } else {\n      res.sendStatus(401);\n    }\n  });\n\n  // Admin routes for user management\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Don't send password hashes to client\n      const usersResponse = users.map(({ passwordHash, ...user }) => user);\n      res.json(usersResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/role\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n      \n      const updatedUser = await storage.updateUserRole(id, role);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isActive } = req.body;\n      \n      const updatedUser = await storage.updateUserStatus(id, isActive);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { passwordHash, ...userResponse } = updatedUser;\n      res.json(userResponse);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user status\" });\n    }\n  });\n}\n\n// Middleware to require authentication\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Middleware to require admin role\nexport function requireAdmin(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  if (req.user?.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  \n  next();\n}","size_bytes":6131},"client/src/components/ProductEditForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from \"lucide-react\";\n\n// Product type from schema\ntype Product = {\n  id: number;\n  name: string;\n  nameKa: string | null;\n  nameRu: string | null;\n  description: string;\n  descriptionKa: string | null;\n  descriptionRu: string | null;\n  price: string;\n  category: string;\n  imageUrl: string;\n  inStock: boolean | null;\n  featured: boolean | null;\n};\n\n// Product edit schema\nconst productEditSchema = z.object({\n  // English fields\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  \n  // Georgian fields\n  nameKa: z.string().optional().or(z.literal(\"\")),\n  descriptionKa: z.string().optional().or(z.literal(\"\")),\n  \n  // Russian fields\n  nameRu: z.string().optional().or(z.literal(\"\")),\n  descriptionRu: z.string().optional().or(z.literal(\"\")),\n  \n  // Other fields\n  price: z.string().min(1, \"Price is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  imageUrl: z.string().url(\"Invalid image URL\"),\n  inStock: z.boolean(),\n  featured: z.boolean(),\n});\n\ntype ProductEditData = z.infer<typeof productEditSchema>;\n\ninterface ProductEditFormProps {\n  product: Product | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (productId: number, data: ProductEditData) => Promise<void>;\n}\n\nexport function ProductEditForm({ product, isOpen, onClose, onSave }: ProductEditFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<ProductEditData>({\n    resolver: zodResolver(productEditSchema),\n    defaultValues: {\n      name: product?.name || \"\",\n      nameKa: product?.nameKa || \"\",\n      nameRu: product?.nameRu || \"\",\n      description: product?.description || \"\",\n      descriptionKa: product?.descriptionKa || \"\",\n      descriptionRu: product?.descriptionRu || \"\",\n      price: product?.price || \"\",\n      category: product?.category || \"food\",\n      imageUrl: product?.imageUrl || \"\",\n      inStock: product?.inStock ?? true,\n      featured: product?.featured ?? false,\n    },\n  });\n\n  // Reset form when product changes\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        name: product.name || \"\",\n        nameKa: product.nameKa || \"\",\n        nameRu: product.nameRu || \"\",\n        description: product.description || \"\",\n        descriptionKa: product.descriptionKa || \"\",\n        descriptionRu: product.descriptionRu || \"\",\n        price: product.price || \"\",\n        category: product.category || \"food\",\n        imageUrl: product.imageUrl || \"\",\n        inStock: product.inStock ?? true,\n        featured: product.featured ?? false,\n      });\n    }\n  }, [product, form]);\n\n  const handleSubmit = async (data: ProductEditData) => {\n    if (!product) return;\n\n    setIsLoading(true);\n    try {\n      await onSave(product.id, data);\n      onClose();\n    } catch (error) {\n      console.error(\"Failed to save product:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  if (!product) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Product: {product.name}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <Tabs defaultValue=\"english\" className=\"w-full\">\n              <TabsList className=\"grid grid-cols-3 w-full\">\n                <TabsTrigger value=\"english\">English</TabsTrigger>\n                <TabsTrigger value=\"georgian\">Georgian</TabsTrigger>\n                <TabsTrigger value=\"russian\">Russian</TabsTrigger>\n              </TabsList>\n\n              {/* English Tab */}\n              <TabsContent value=\"english\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"wine\">Wine</SelectItem>\n                            <SelectItem value=\"food\">Food</SelectItem>\n                            <SelectItem value=\"crafts\">Crafts</SelectItem>\n                            <SelectItem value=\"souvenirs\">Souvenirs</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[120px]\" \n                          {...field} \n                          data-testid=\"textarea-description\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Georgian Tab */}\n              <TabsContent value=\"georgian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nameKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Name (Georgian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-nameKa\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[120px]\" \n                          {...field} \n                          data-testid=\"textarea-descriptionKa\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Russian Tab */}\n              <TabsContent value=\"russian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nameRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Name (Russian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-nameRu\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[120px]\" \n                          {...field} \n                          data-testid=\"textarea-descriptionRu\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n            </Tabs>\n\n            {/* Product Details Section */}\n            <div className=\"border-t pt-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Product Details</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price (USD) *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          {...field} \n                          data-testid=\"input-price\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-imageUrl\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"inStock\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-inStock\"\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        In Stock\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"featured\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-featured\"\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Featured Product\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Preview Section */}\n            {product.imageUrl && (\n              <div className=\"border-t pt-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Current Product Image</h3>\n                <img \n                  src={product.imageUrl} \n                  alt={product.name}\n                  className=\"h-32 w-32 object-cover rounded-lg border\"\n                />\n              </div>\n            )}\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save-product\"\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save Changes\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13640},"client/src/components/RegionEditForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Save, X } from \"lucide-react\";\n\nconst regionEditSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  nameKa: z.string().optional(),\n  nameRu: z.string().optional(),\n  description: z.string().min(1, \"Description is required\"),\n  descriptionKa: z.string().optional(),\n  descriptionRu: z.string().optional(),\n  imageUrl: z.string().url(\"Please enter a valid image URL\"),\n  mainAttraction: z.string().min(1, \"Main attraction is required\"),\n  location: z.string().optional(),\n  locationKa: z.string().optional(),\n  locationRu: z.string().optional(),\n  bestTimeToVisit: z.string().optional(),\n  bestTimeToVisitKa: z.string().optional(),\n  bestTimeToVisitRu: z.string().optional(),\n  climate: z.string().optional(),\n  climateKa: z.string().optional(),\n  climateRu: z.string().optional(),\n  howToReach: z.string().optional(),\n  howToReachKa: z.string().optional(),\n  howToReachRu: z.string().optional(),\n  slug: z.string().min(1, \"Slug is required\"),\n  featured: z.boolean(),\n});\n\ntype RegionEditFormData = z.infer<typeof regionEditSchema>;\n\ninterface Region {\n  id: number;\n  name: string;\n  nameKa?: string | null;\n  nameRu?: string | null;\n  description: string;\n  descriptionKa?: string | null;\n  descriptionRu?: string | null;\n  imageUrl: string;\n  mainAttraction: string;\n  location?: string | null;\n  locationKa?: string | null;\n  locationRu?: string | null;\n  bestTimeToVisit?: string | null;\n  bestTimeToVisitKa?: string | null;\n  bestTimeToVisitRu?: string | null;\n  climate?: string | null;\n  climateKa?: string | null;\n  climateRu?: string | null;\n  howToReach?: string | null;\n  howToReachKa?: string | null;\n  howToReachRu?: string | null;\n  slug: string;\n  featured: boolean;\n}\n\ninterface RegionEditFormProps {\n  region: Region | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (regionId: number, data: RegionEditFormData) => Promise<void>;\n}\n\nexport default function RegionEditForm({ region, isOpen, onClose, onSave }: RegionEditFormProps) {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<RegionEditFormData>({\n    resolver: zodResolver(regionEditSchema),\n    defaultValues: {\n      name: \"\",\n      nameKa: \"\",\n      nameRu: \"\",\n      description: \"\",\n      descriptionKa: \"\",\n      descriptionRu: \"\",\n      imageUrl: \"\",\n      mainAttraction: \"\",\n      location: \"\",\n      locationKa: \"\",\n      locationRu: \"\",\n      bestTimeToVisit: \"\",\n      bestTimeToVisitKa: \"\",\n      bestTimeToVisitRu: \"\",\n      climate: \"\",\n      climateKa: \"\",\n      climateRu: \"\",\n      howToReach: \"\",\n      howToReachKa: \"\",\n      howToReachRu: \"\",\n      slug: \"\",\n      featured: false,\n    },\n  });\n\n  // Update form when region changes\n  useEffect(() => {\n    if (region) {\n      form.reset({\n        name: region.name,\n        nameKa: region.nameKa || \"\",\n        nameRu: region.nameRu || \"\",\n        description: region.description,\n        descriptionKa: region.descriptionKa || \"\",\n        descriptionRu: region.descriptionRu || \"\",\n        imageUrl: region.imageUrl,\n        mainAttraction: region.mainAttraction,\n        location: region.location || \"\",\n        locationKa: region.locationKa || \"\",\n        locationRu: region.locationRu || \"\",\n        bestTimeToVisit: region.bestTimeToVisit || \"\",\n        bestTimeToVisitKa: region.bestTimeToVisitKa || \"\",\n        bestTimeToVisitRu: region.bestTimeToVisitRu || \"\",\n        climate: region.climate || \"\",\n        climateKa: region.climateKa || \"\",\n        climateRu: region.climateRu || \"\",\n        howToReach: region.howToReach || \"\",\n        howToReachKa: region.howToReachKa || \"\",\n        howToReachRu: region.howToReachRu || \"\",\n        slug: region.slug,\n        featured: region.featured,\n      });\n    }\n  }, [region, form]);\n\n  const onSubmit = async (data: RegionEditFormData) => {\n    if (!region) return;\n    \n    setLoading(true);\n    try {\n      await onSave(region.id, data);\n      toast({\n        title: \"Success\",\n        description: \"Region updated successfully\",\n      });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update region\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!region) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Region: {region.name}</DialogTitle>\n          <DialogDescription>\n            Update region information including descriptions in multiple languages\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Tabs defaultValue=\"english\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"english\">English</TabsTrigger>\n                <TabsTrigger value=\"georgian\">Georgian</TabsTrigger>\n                <TabsTrigger value=\"russian\">Russian</TabsTrigger>\n              </TabsList>\n\n              {/* English Tab */}\n              <TabsContent value=\"english\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"slug\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Slug</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"https://...\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mainAttraction\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Main Attraction</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bestTimeToVisit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Best Time to Visit</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"climate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Climate</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"howToReach\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>How to Reach</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Georgian Tab */}\n              <TabsContent value=\"georgian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nameKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name (Georgian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"locationKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bestTimeToVisitKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Best Time to Visit (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"climateKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Climate (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"howToReachKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>How to Reach (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Russian Tab */}\n              <TabsContent value=\"russian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nameRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name (Russian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={3} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"locationRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bestTimeToVisitRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Best Time to Visit (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"climateRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Climate (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"howToReachRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>How to Reach (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={2} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex items-center space-x-2\">\n              <FormField\n                control={form.control}\n                name=\"featured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormLabel>Featured Region</FormLabel>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                <X className=\"mr-2 h-4 w-4\" />\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={loading}>\n                <Save className=\"mr-2 h-4 w-4\" />\n                {loading ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17617},"client/src/components/TourEditForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2 } from \"lucide-react\";\n\n// Tour type from schema\ntype Tour = {\n  id: number;\n  title: string;\n  titleKa: string | null;\n  titleRu: string | null;\n  description: string;\n  descriptionKa: string | null;\n  descriptionRu: string | null;\n  price: string;\n  duration: string;\n  maxPeople: number;\n  includes: string;\n  includesKa: string | null;\n  includesRu: string | null;\n  category: string;\n  imageUrl: string;\n  regionId: number | null;\n  featured: boolean | null;\n};\n\n// Region type for dropdown\ntype Region = {\n  id: number;\n  name: string;\n};\n\n// Tour edit schema\nconst tourEditSchema = z.object({\n  // English fields\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  includes: z.string().min(1, \"Includes is required\"),\n  \n  // Georgian fields\n  titleKa: z.string().optional().or(z.literal(\"\")),\n  descriptionKa: z.string().optional().or(z.literal(\"\")),\n  includesKa: z.string().optional().or(z.literal(\"\")),\n  \n  // Russian fields\n  titleRu: z.string().optional().or(z.literal(\"\")),\n  descriptionRu: z.string().optional().or(z.literal(\"\")),\n  includesRu: z.string().optional().or(z.literal(\"\")),\n  \n  // Other fields\n  price: z.string().min(1, \"Price is required\"),\n  duration: z.string().min(1, \"Duration is required\"),\n  maxPeople: z.number().min(1, \"Max people must be at least 1\"),\n  category: z.string().min(1, \"Category is required\"),\n  imageUrl: z.string().url(\"Invalid image URL\"),\n  regionId: z.number().optional(),\n  featured: z.boolean(),\n});\n\ntype TourEditData = z.infer<typeof tourEditSchema>;\n\ninterface TourEditFormProps {\n  tour: Tour | null;\n  regions: Region[];\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (tourId: number, data: TourEditData) => Promise<void>;\n}\n\nexport function TourEditForm({ tour, regions, isOpen, onClose, onSave }: TourEditFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<TourEditData>({\n    resolver: zodResolver(tourEditSchema),\n    defaultValues: {\n      title: tour?.title || \"\",\n      titleKa: tour?.titleKa || \"\",\n      titleRu: tour?.titleRu || \"\",\n      description: tour?.description || \"\",\n      descriptionKa: tour?.descriptionKa || \"\",\n      descriptionRu: tour?.descriptionRu || \"\",\n      includes: tour?.includes || \"\",\n      includesKa: tour?.includesKa || \"\",\n      includesRu: tour?.includesRu || \"\",\n      price: tour?.price || \"\",\n      duration: tour?.duration || \"\",\n      maxPeople: tour?.maxPeople || 1,\n      category: tour?.category || \"cultural\",\n      imageUrl: tour?.imageUrl || \"\",\n      regionId: tour?.regionId || undefined,\n      featured: tour?.featured ?? false,\n    },\n  });\n\n  // Reset form when tour changes\n  useEffect(() => {\n    if (tour) {\n      form.reset({\n        title: tour.title || \"\",\n        titleKa: tour.titleKa || \"\",\n        titleRu: tour.titleRu || \"\",\n        description: tour.description || \"\",\n        descriptionKa: tour.descriptionKa || \"\",\n        descriptionRu: tour.descriptionRu || \"\",\n        includes: tour.includes || \"\",\n        includesKa: tour.includesKa || \"\",\n        includesRu: tour.includesRu || \"\",\n        price: tour.price || \"\",\n        duration: tour.duration || \"\",\n        maxPeople: tour.maxPeople || 1,\n        category: tour.category || \"cultural\",\n        imageUrl: tour.imageUrl || \"\",\n        regionId: tour.regionId || undefined,\n        featured: tour.featured ?? false,\n      });\n    }\n  }, [tour, form]);\n\n  const handleSubmit = async (data: TourEditData) => {\n    if (!tour) return;\n\n    setIsLoading(true);\n    try {\n      await onSave(tour.id, data);\n      onClose();\n    } catch (error) {\n      console.error(\"Failed to save tour:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  if (!tour) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Tour: {tour.title}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <Tabs defaultValue=\"english\" className=\"w-full\">\n              <TabsList className=\"grid grid-cols-3 w-full\">\n                <TabsTrigger value=\"english\">English</TabsTrigger>\n                <TabsTrigger value=\"georgian\">Georgian</TabsTrigger>\n                <TabsTrigger value=\"russian\">Russian</TabsTrigger>\n              </TabsList>\n\n              {/* English Tab */}\n              <TabsContent value=\"english\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"wine\">Wine</SelectItem>\n                            <SelectItem value=\"culinary\">Culinary</SelectItem>\n                            <SelectItem value=\"cultural\">Cultural</SelectItem>\n                            <SelectItem value=\"adventure\">Adventure</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-description\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"includes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>What's Included *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-includes\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Georgian Tab */}\n              <TabsContent value=\"georgian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"titleKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title (Georgian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-titleKa\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-descriptionKa\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"includesKa\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>What's Included (Georgian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-includesKa\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              {/* Russian Tab */}\n              <TabsContent value=\"russian\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"titleRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title (Russian)</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-titleRu\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descriptionRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-descriptionRu\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"includesRu\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>What's Included (Russian)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          className=\"min-h-[100px]\" \n                          {...field} \n                          data-testid=\"textarea-includesRu\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n            </Tabs>\n\n            {/* Details Section */}\n            <div className=\"border-t pt-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Tour Details</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price (USD) *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          {...field} \n                          data-testid=\"input-price\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"duration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., 3 days, 5 hours\" \n                          {...field} \n                          data-testid=\"input-duration\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"maxPeople\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max People *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-maxPeople\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-imageUrl\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"regionId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Region</FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}\n                        value={field.value?.toString() || \"\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-regionId\">\n                            <SelectValue placeholder=\"Select region\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"\">No region</SelectItem>\n                          {regions.map((region) => (\n                            <SelectItem key={region.id} value={region.id.toString()}>\n                              {region.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"featured\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-featured\"\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Featured Tour\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save-tour\"\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save Changes\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17894},"client/src/components/UserEditForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Loader2 } from \"lucide-react\";\n\n// User type from schema\ntype User = {\n  id: string;\n  username: string | null;\n  email: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  role: string | null;\n  isActive: boolean | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n};\n\n// User edit schema\nconst userEditSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  profileImageUrl: z.string().url(\"Invalid URL\").optional().or(z.literal(\"\")),\n  role: z.enum([\"user\", \"admin\"]),\n  isActive: z.boolean(),\n  newPassword: z.string().optional().or(z.literal(\"\")),\n});\n\ntype UserEditData = z.infer<typeof userEditSchema>;\n\ninterface UserEditFormProps {\n  user: User | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (userId: string, data: UserEditData) => Promise<void>;\n}\n\nexport function UserEditForm({ user, isOpen, onClose, onSave }: UserEditFormProps) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<UserEditData>({\n    resolver: zodResolver(userEditSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      profileImageUrl: user?.profileImageUrl || \"\",\n      role: (user?.role as \"user\" | \"admin\") || \"user\",\n      isActive: user?.isActive ?? true,\n      newPassword: \"\",\n    },\n  });\n\n  // Reset form when user changes\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        username: user.username || \"\",\n        email: user.email || \"\",\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        profileImageUrl: user.profileImageUrl || \"\",\n        role: (user.role as \"user\" | \"admin\") || \"user\",\n        isActive: user.isActive ?? true,\n        newPassword: \"\",\n      });\n    }\n  }, [user, form]);\n\n  const handleSubmit = async (data: UserEditData) => {\n    if (!user) return;\n\n    setIsLoading(true);\n    try {\n      await onSave(user.id, data);\n      onClose();\n    } catch (error) {\n      console.error(\"Failed to save user:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  if (!user) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit User: {user.username}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Username */}\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Email */}\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email *</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* First Name */}\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-firstName\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Last Name */}\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-lastName\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Profile Image URL */}\n            <FormField\n              control={form.control}\n              name=\"profileImageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Profile Image URL</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"https://example.com/profile.jpg\" \n                      {...field} \n                      data-testid=\"input-profileImageUrl\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Role */}\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Active Status */}\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2 space-y-0 pt-6\">\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-isActive\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"text-sm font-normal\">\n                      Account Active\n                    </FormLabel>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* New Password */}\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password (optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"password\"\n                      placeholder=\"Enter new password to change it\"\n                      {...field} \n                      data-testid=\"input-newPassword\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* User Info */}\n            <div className=\"text-sm text-gray-500 space-y-1\">\n              <p><strong>User ID:</strong> {user.id}</p>\n              <p><strong>Created:</strong> {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}</p>\n              <p><strong>Last Updated:</strong> {user.updatedAt ? new Date(user.updatedAt).toLocaleDateString() : 'N/A'}</p>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save-user\"\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Save Changes\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9578}},"version":1}